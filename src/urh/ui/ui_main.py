#
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(798, 469)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/icons/appicon.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        MainWindow.setDockNestingEnabled(False)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.splitter = QtWidgets.QSplitter(parent=self.centralwidget)
        self.splitter.setStyleSheet("QSplitter::handle:horizontal {\n"
"margin: 4px 0px;\n"
"    background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, \n"
"stop:0 rgba(255, 255, 255, 0), \n"
"stop:0.5 rgba(100, 100, 100, 100), \n"
"stop:1 rgba(255, 255, 255, 0));\n"
"image: url(:/icons/icons/splitter_handle_vertical.svg);\n"
"}")
        self.splitter.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter.setHandleWidth(6)
        self.splitter.setObjectName("splitter")
        self.layoutWidget = QtWidgets.QWidget(parent=self.splitter)
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_3.setContentsMargins(11, 11, 11, 0)
        self.verticalLayout_3.setSpacing(7)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.lnEdtTreeFilter = QtWidgets.QLineEdit(parent=self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lnEdtTreeFilter.sizePolicy().hasHeightForWidth())
        self.lnEdtTreeFilter.setSizePolicy(sizePolicy)
        self.lnEdtTreeFilter.setAcceptDrops(False)
        self.lnEdtTreeFilter.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhDialableCharactersOnly)
        self.lnEdtTreeFilter.setClearButtonEnabled(True)
        self.lnEdtTreeFilter.setObjectName("lnEdtTreeFilter")
        self.horizontalLayout_3.addWidget(self.lnEdtTreeFilter)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.btnFileTreeGoUp = QtWidgets.QToolButton(parent=self.layoutWidget)
        icon = QtGui.QIcon.fromTheme("go-up")
        self.btnFileTreeGoUp.setIcon(icon)
        self.btnFileTreeGoUp.setObjectName("btnFileTreeGoUp")
        self.horizontalLayout_3.addWidget(self.btnFileTreeGoUp)
        self.verticalLayout_3.addLayout(self.horizontalLayout_3)
        self.fileTree = DirectoryTreeView(parent=self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(10)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fileTree.sizePolicy().hasHeightForWidth())
        self.fileTree.setSizePolicy(sizePolicy)
        self.fileTree.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.fileTree.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fileTree.setAutoScroll(True)
        self.fileTree.setDragEnabled(True)
        self.fileTree.setDragDropMode(QtWidgets.QAbstractItemView.DragDropMode.DragOnly)
        self.fileTree.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.ExtendedSelection)
        self.fileTree.setSortingEnabled(False)
        self.fileTree.setObjectName("fileTree")
        self.fileTree.header().setCascadingSectionResizes(True)
        self.fileTree.header().setStretchLastSection(False)
        self.verticalLayout_3.addWidget(self.fileTree)
        self.tabWidget_Project = QtWidgets.QTabWidget(parent=self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget_Project.sizePolicy().hasHeightForWidth())
        self.tabWidget_Project.setSizePolicy(sizePolicy)
        self.tabWidget_Project.setStyleSheet("QTabWidget::pane { border: 0; }")
        self.tabWidget_Project.setObjectName("tabWidget_Project")
        self.tabParticipants = QtWidgets.QWidget()
        self.tabParticipants.setObjectName("tabParticipants")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.tabParticipants)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.listViewParticipants = QtWidgets.QListView(parent=self.tabParticipants)
        self.listViewParticipants.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.listViewParticipants.setObjectName("listViewParticipants")
        self.horizontalLayout.addWidget(self.listViewParticipants)
        self.tabWidget_Project.addTab(self.tabParticipants, "")
        self.tabDescription = QtWidgets.QWidget()
        self.tabDescription.setObjectName("tabDescription")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.tabDescription)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.textEditProjectDescription = QtWidgets.QTextEdit(parent=self.tabDescription)
        self.textEditProjectDescription.setObjectName("textEditProjectDescription")
        self.horizontalLayout_2.addWidget(self.textEditProjectDescription)
        self.tabWidget_Project.addTab(self.tabDescription, "")
        self.verticalLayout_3.addWidget(self.tabWidget_Project)
        self.tabWidget = QtWidgets.QTabWidget(parent=self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setBaseSize(QtCore.QSize(0, 0))
        self.tabWidget.setObjectName("tabWidget")
        self.tab_interpretation = QtWidgets.QWidget()
        self.tab_interpretation.setObjectName("tab_interpretation")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab_interpretation)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.tabWidget.addTab(self.tab_interpretation, "")
        self.tab_protocol = QtWidgets.QWidget()
        self.tab_protocol.setObjectName("tab_protocol")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.tab_protocol)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabWidget.addTab(self.tab_protocol, "")
        self.tab_generator = QtWidgets.QWidget()
        self.tab_generator.setObjectName("tab_generator")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.tab_generator)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.tabWidget.addTab(self.tab_generator, "")
        self.tab_simulator = QtWidgets.QWidget()
        self.tab_simulator.setObjectName("tab_simulator")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.tab_simulator)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.tabWidget.addTab(self.tab_simulator, "")
        self.verticalLayout_4.addWidget(self.splitter)
        self.labelNonProjectMode = QtWidgets.QLabel(parent=self.centralwidget)
        self.labelNonProjectMode.setStyleSheet("background: rgba(255,255,0,64)")
        self.labelNonProjectMode.setWordWrap(True)
        self.labelNonProjectMode.setObjectName("labelNonProjectMode")
        self.verticalLayout_4.addWidget(self.labelNonProjectMode)
        self.verticalLayout_4.setStretch(0, 100)
        self.verticalLayout_4.setStretch(1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 798, 27))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuImport = QtWidgets.QMenu(parent=self.menuFile)
        icon = QtGui.QIcon.fromTheme("document-import")
        self.menuImport.setIcon(icon)
        self.menuImport.setObjectName("menuImport")
        self.menuEdit = QtWidgets.QMenu(parent=self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuDefault_noise_threshold = QtWidgets.QMenu(parent=self.menuEdit)
        self.menuDefault_noise_threshold.setObjectName("menuDefault_noise_threshold")
        self.menuHelp = QtWidgets.QMenu(parent=self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.actionFSK = QtGui.QAction(parent=MainWindow)
        self.actionFSK.setCheckable(True)
        self.actionFSK.setObjectName("actionFSK")
        self.actionOOK = QtGui.QAction(parent=MainWindow)
        self.actionOOK.setCheckable(True)
        self.actionOOK.setChecked(True)
        self.actionOOK.setObjectName("actionOOK")
        self.actionPSK = QtGui.QAction(parent=MainWindow)
        self.actionPSK.setCheckable(True)
        self.actionPSK.setObjectName("actionPSK")
        self.actionNone = QtGui.QAction(parent=MainWindow)
        self.actionNone.setCheckable(True)
        self.actionNone.setObjectName("actionNone")
        self.actionAuto_Fit_Y = QtGui.QAction(parent=MainWindow)
        self.actionAuto_Fit_Y.setCheckable(True)
        self.actionAuto_Fit_Y.setChecked(True)
        self.actionAuto_Fit_Y.setObjectName("actionAuto_Fit_Y")
        self.actionUndo = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("edit-undo")
        self.actionUndo.setIcon(icon)
        self.actionUndo.setObjectName("actionUndo")
        self.actionRedo = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("edit-redo")
        self.actionRedo.setIcon(icon)
        self.actionRedo.setObjectName("actionRedo")
        self.actionShow_Confirm_Close_Dialog = QtGui.QAction(parent=MainWindow)
        self.actionShow_Confirm_Close_Dialog.setCheckable(True)
        self.actionShow_Confirm_Close_Dialog.setChecked(False)
        self.actionShow_Confirm_Close_Dialog.setObjectName("actionShow_Confirm_Close_Dialog")
        self.actionTest = QtGui.QAction(parent=MainWindow)
        self.actionTest.setObjectName("actionTest")
        self.actionHold_Shift_to_Drag = QtGui.QAction(parent=MainWindow)
        self.actionHold_Shift_to_Drag.setCheckable(True)
        self.actionHold_Shift_to_Drag.setChecked(False)
        self.actionHold_Shift_to_Drag.setObjectName("actionHold_Shift_to_Drag")
        self.actionDocumentation = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("help-contents")
        self.actionDocumentation.setIcon(icon)
        self.actionDocumentation.setIconVisibleInMenu(True)
        self.actionDocumentation.setObjectName("actionDocumentation")
        self.actionAbout_AutomaticHacker = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("help-about")
        self.actionAbout_AutomaticHacker.setIcon(icon)
        self.actionAbout_AutomaticHacker.setIconVisibleInMenu(True)
        self.actionAbout_AutomaticHacker.setObjectName("actionAbout_AutomaticHacker")
        self.actionOpenSignal = QtGui.QAction(parent=MainWindow)
        self.actionOpenSignal.setObjectName("actionOpenSignal")
        self.actionOpenProtocol = QtGui.QAction(parent=MainWindow)
        self.actionOpenProtocol.setObjectName("actionOpenProtocol")
        self.actionShow_Compare_Frame = QtGui.QAction(parent=MainWindow)
        self.actionShow_Compare_Frame.setCheckable(True)
        self.actionShow_Compare_Frame.setChecked(True)
        self.actionShow_Compare_Frame.setObjectName("actionShow_Compare_Frame")
        self.actionCloseAllFiles = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("window-close")
        self.actionCloseAllFiles.setIcon(icon)
        self.actionCloseAllFiles.setIconVisibleInMenu(True)
        self.actionCloseAllFiles.setObjectName("actionCloseAllFiles")
        self.actionSaveAllSignals = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("document-save")
        self.actionSaveAllSignals.setIcon(icon)
        self.actionSaveAllSignals.setIconVisibleInMenu(True)
        self.actionSaveAllSignals.setObjectName("actionSaveAllSignals")
        self.actionSeperate_Protocols_in_Compare_Frame = QtGui.QAction(parent=MainWindow)
        self.actionSeperate_Protocols_in_Compare_Frame.setCheckable(True)
        self.actionSeperate_Protocols_in_Compare_Frame.setChecked(True)
        self.actionSeperate_Protocols_in_Compare_Frame.setObjectName("actionSeperate_Protocols_in_Compare_Frame")
        self.actionOpenArchive = QtGui.QAction(parent=MainWindow)
        self.actionOpenArchive.setObjectName("actionOpenArchive")
        self.actionOpen = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("document-open")
        self.actionOpen.setIcon(icon)
        self.actionOpen.setIconVisibleInMenu(True)
        self.actionOpen.setObjectName("actionOpen")
        self.actionOpen_Folder = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("folder-open")
        self.actionOpen_Folder.setIcon(icon)
        self.actionOpen_Folder.setObjectName("actionOpen_Folder")
        self.actionShow_only_Compare_Frame = QtGui.QAction(parent=MainWindow)
        self.actionShow_only_Compare_Frame.setCheckable(True)
        self.actionShow_only_Compare_Frame.setChecked(True)
        self.actionShow_only_Compare_Frame.setObjectName("actionShow_only_Compare_Frame")
        self.actionConfigurePlugins = QtGui.QAction(parent=MainWindow)
        self.actionConfigurePlugins.setIconVisibleInMenu(True)
        self.actionConfigurePlugins.setObjectName("actionConfigurePlugins")
        self.actionSort_Frames_by_Name = QtGui.QAction(parent=MainWindow)
        self.actionSort_Frames_by_Name.setObjectName("actionSort_Frames_by_Name")
        self.actionConvert_Folder_to_Project = QtGui.QAction(parent=MainWindow)
        self.actionConvert_Folder_to_Project.setIconVisibleInMenu(True)
        self.actionConvert_Folder_to_Project.setObjectName("actionConvert_Folder_to_Project")
        self.actionDecoding = QtGui.QAction(parent=MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/icons/decoding.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionDecoding.setIcon(icon1)
        self.actionDecoding.setObjectName("actionDecoding")
        self.actionRecord = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("media-record")
        self.actionRecord.setIcon(icon)
        self.actionRecord.setIconVisibleInMenu(True)
        self.actionRecord.setObjectName("actionRecord")
        self.actionSpectrum_Analyzer = QtGui.QAction(parent=MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/icons/spectrum.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionSpectrum_Analyzer.setIcon(icon2)
        self.actionSpectrum_Analyzer.setIconVisibleInMenu(True)
        self.actionSpectrum_Analyzer.setObjectName("actionSpectrum_Analyzer")
        self.actionOptions = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("configure")
        self.actionOptions.setIcon(icon)
        self.actionOptions.setIconVisibleInMenu(True)
        self.actionOptions.setObjectName("actionOptions")
        self.actionNew_Project = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("folder-new")
        self.actionNew_Project.setIcon(icon)
        self.actionNew_Project.setObjectName("actionNew_Project")
        self.actionSniff_protocol = QtGui.QAction(parent=MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/icons/sniffer.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionSniff_protocol.setIcon(icon3)
        self.actionSniff_protocol.setObjectName("actionSniff_protocol")
        self.actionProject_settings = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("configure")
        self.actionProject_settings.setIcon(icon)
        self.actionProject_settings.setObjectName("actionProject_settings")
        self.actionSave_project = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("document-save")
        self.actionSave_project.setIcon(icon)
        self.actionSave_project.setObjectName("actionSave_project")
        self.actionFullscreen_mode = QtGui.QAction(parent=MainWindow)
        self.actionFullscreen_mode.setCheckable(True)
        self.actionFullscreen_mode.setObjectName("actionFullscreen_mode")
        self.actionOpen_directory = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("folder-open")
        self.actionOpen_directory.setIcon(icon)
        self.actionOpen_directory.setObjectName("actionOpen_directory")
        self.actionAbout_Qt = QtGui.QAction(parent=MainWindow)
        self.actionAbout_Qt.setObjectName("actionAbout_Qt")
        self.actionShowFileTree = QtGui.QAction(parent=MainWindow)
        self.actionShowFileTree.setCheckable(True)
        self.actionShowFileTree.setObjectName("actionShowFileTree")
        self.actionSamples_from_csv = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("text-csv")
        self.actionSamples_from_csv.setIcon(icon)
        self.actionSamples_from_csv.setObjectName("actionSamples_from_csv")
        self.actionClose_project = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon.fromTheme("document-close")
        self.actionClose_project.setIcon(icon)
        self.actionClose_project.setObjectName("actionClose_project")
        self.actionAuto_detect_new_signals = QtGui.QAction(parent=MainWindow)
        self.actionAuto_detect_new_signals.setCheckable(True)
        self.actionAuto_detect_new_signals.setChecked(True)
        self.actionAuto_detect_new_signals.setObjectName("actionAuto_detect_new_signals")
        self.actionAutomaticNoiseThreshold = QtGui.QAction(parent=MainWindow)
        self.actionAutomaticNoiseThreshold.setCheckable(True)
        self.actionAutomaticNoiseThreshold.setChecked(True)
        self.actionAutomaticNoiseThreshold.setObjectName("actionAutomaticNoiseThreshold")
        self.action1NoiseThreshold = QtGui.QAction(parent=MainWindow)
        self.action1NoiseThreshold.setCheckable(True)
        self.action1NoiseThreshold.setObjectName("action1NoiseThreshold")
        self.action5NoiseThreshold = QtGui.QAction(parent=MainWindow)
        self.action5NoiseThreshold.setCheckable(True)
        self.action5NoiseThreshold.setObjectName("action5NoiseThreshold")
        self.action10NoiseThreshold = QtGui.QAction(parent=MainWindow)
        self.action10NoiseThreshold.setCheckable(True)
        self.action10NoiseThreshold.setObjectName("action10NoiseThreshold")
        self.action100NoiseThreshold = QtGui.QAction(parent=MainWindow)
        self.action100NoiseThreshold.setCheckable(True)
        self.action100NoiseThreshold.setObjectName("action100NoiseThreshold")
        self.menuImport.addAction(self.actionSamples_from_csv)
        self.menuFile.addAction(self.actionNew_Project)
        self.menuFile.addAction(self.actionProject_settings)
        self.menuFile.addAction(self.actionSave_project)
        self.menuFile.addAction(self.actionClose_project)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionOpen_directory)
        self.menuFile.addAction(self.menuImport.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSpectrum_Analyzer)
        self.menuFile.addAction(self.actionRecord)
        self.menuFile.addAction(self.actionSniff_protocol)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSaveAllSignals)
        self.menuFile.addAction(self.actionCloseAllFiles)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionConvert_Folder_to_Project)
        self.menuDefault_noise_threshold.addAction(self.actionAutomaticNoiseThreshold)
        self.menuDefault_noise_threshold.addAction(self.action1NoiseThreshold)
        self.menuDefault_noise_threshold.addAction(self.action5NoiseThreshold)
        self.menuDefault_noise_threshold.addAction(self.action10NoiseThreshold)
        self.menuDefault_noise_threshold.addAction(self.action100NoiseThreshold)
        self.menuEdit.addAction(self.actionDecoding)
        self.menuEdit.addAction(self.actionOptions)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionShowFileTree)
        self.menuEdit.addAction(self.actionFullscreen_mode)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionAuto_detect_new_signals)
        self.menuEdit.addAction(self.menuDefault_noise_threshold.menuAction())
        self.menuHelp.addAction(self.actionAbout_AutomaticHacker)
        self.menuHelp.addAction(self.actionAbout_Qt)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget_Project.setCurrentIndex(0)
        self.tabWidget.setCurrentIndex(0)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Universal Radio Hacker"))
        self.lnEdtTreeFilter.setPlaceholderText(_translate("MainWindow", "Filter"))
        self.btnFileTreeGoUp.setText(_translate("MainWindow", "..."))
        self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabParticipants), _translate("MainWindow", "Participants"))
        self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabDescription), _translate("MainWindow", "Description"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_interpretation), _translate("MainWindow", "Interpretation"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_protocol), _translate("MainWindow", "Analysis"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_generator), _translate("MainWindow", "Generator"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_simulator), _translate("MainWindow", "Simulator"))
        self.labelNonProjectMode.setText(_translate("MainWindow", "<html><head/><body><p>Warning: You are running URH in non project mode. All your settings will be lost after closing the program. If you want to keep your settings create a project via File -&gt; <a href=\"open_new_project_dialog\"><span style=\" text-decoration: underline; color:#0000ff;\">New Project</span></a>. <a href=\"dont_show_non_project_again\"><span style=\" text-decoration: underline; color:#0000ff;\">Don\'t show this hint</span></a></p></body></html>"))
        self.menuFile.setTitle(_translate("MainWindow", "Fi&le"))
        self.menuImport.setTitle(_translate("MainWindow", "Import"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edi&t"))
        self.menuDefault_noise_threshold.setTitle(_translate("MainWindow", "Default noise threshold"))
        self.menuHelp.setTitle(_translate("MainWindow", "Hel&p"))
        self.actionFSK.setText(_translate("MainWindow", "Undo"))
        self.actionOOK.setText(_translate("MainWindow", "Redo"))
        self.actionPSK.setText(_translate("MainWindow", "PSK"))
        self.actionNone.setText(_translate("MainWindow", "None (bei .bin)"))
        self.actionAuto_Fit_Y.setText(_translate("MainWindow", "&Auto Fit Y"))
        self.actionUndo.setText(_translate("MainWindow", "&Undo"))
        self.actionRedo.setText(_translate("MainWindow", "&Redo"))
        self.actionShow_Confirm_Close_Dialog.setText(_translate("MainWindow", "&Show Confirm Close Dialog"))
        self.actionTest.setText(_translate("MainWindow", "test"))
        self.actionHold_Shift_to_Drag.setText(_translate("MainWindow", "&Hold Shift to Drag"))
        self.actionDocumentation.setText(_translate("MainWindow", "&Documentation"))
        self.actionAbout_AutomaticHacker.setText(_translate("MainWindow", "&About Universal Radio Hacker..."))
        self.actionOpenSignal.setText(_translate("MainWindow", "&Signal"))
        self.actionOpenProtocol.setText(_translate("MainWindow", "&Protocol"))
        self.actionShow_Compare_Frame.setText(_translate("MainWindow", "Show &Compare Frame"))
        self.actionCloseAllFiles.setText(_translate("MainWindow", "&Close all files"))
        self.actionSaveAllSignals.setText(_translate("MainWindow", "&Save all signals"))
        self.actionSeperate_Protocols_in_Compare_Frame.setText(_translate("MainWindow", "Separate &Protocols in Compare Frame"))
        self.actionOpenArchive.setText(_translate("MainWindow", "&Archive"))
        self.actionOpen.setText(_translate("MainWindow", "&Open..."))
        self.actionOpen_Folder.setText(_translate("MainWindow", "Open &Folder.."))
        self.actionShow_only_Compare_Frame.setText(_translate("MainWindow", "Show Compare Frame only"))
        self.actionConfigurePlugins.setText(_translate("MainWindow", "Configure..."))
        self.actionSort_Frames_by_Name.setText(_translate("MainWindow", "Sort &Frames by Name"))
        self.actionConvert_Folder_to_Project.setText(_translate("MainWindow", "Conv&ert Folder to Project"))
        self.actionDecoding.setText(_translate("MainWindow", "&Decoding..."))
        self.actionRecord.setText(_translate("MainWindow", "&Record signal..."))
        self.actionSpectrum_Analyzer.setText(_translate("MainWindow", "Spectrum &Analyzer..."))
        self.actionOptions.setText(_translate("MainWindow", "&Options..."))
        self.actionNew_Project.setText(_translate("MainWindow", "&New Project.."))
        self.actionSniff_protocol.setText(_translate("MainWindow", "Sn&iff protocol..."))
        self.actionProject_settings.setText(_translate("MainWindow", "&Project settings..."))
        self.actionSave_project.setText(_translate("MainWindow", "Sa&ve project"))
        self.actionFullscreen_mode.setText(_translate("MainWindow", "&Fullscreen mode"))
        self.actionOpen_directory.setText(_translate("MainWindow", "Open &folder..."))
        self.actionAbout_Qt.setText(_translate("MainWindow", "About &Qt"))
        self.actionShowFileTree.setText(_translate("MainWindow", "&Show file tree"))
        self.actionSamples_from_csv.setText(_translate("MainWindow", "IQ samples from csv"))
        self.actionClose_project.setText(_translate("MainWindow", "Close project"))
        self.actionAuto_detect_new_signals.setText(_translate("MainWindow", "Auto detect signals on loading"))
        self.actionAutomaticNoiseThreshold.setText(_translate("MainWindow", "Automatic"))
        self.action1NoiseThreshold.setText(_translate("MainWindow", "1%"))
        self.action5NoiseThreshold.setText(_translate("MainWindow", "5%"))
        self.action10NoiseThreshold.setText(_translate("MainWindow", "10%"))
        self.action100NoiseThreshold.setText(_translate("MainWindow", "100% (disables demodulation)"))
from urh.ui.views.DirectoryTreeView import DirectoryTreeView
