name: Linux

env:
  PYTHONUNBUFFERED: 1

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  ci:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          pip install -r data/requirements.txt
          sudo apt-get install libhackrf-dev librtlsdr-dev xvfb libxkbcommon-x11-0 x11-utils libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0
          pip install PyVirtualDisplay==0.2.5
          pip install twine setuptools wheel pytest pytest-xvfb pytest-cov pytest-faulthandler
          python -c "import tempfile, os; open(os.path.join(tempfile.gettempdir(), 'urh_releasing'), 'w').close()"

      - name: Build Cython Extensions
        run: python src/urh/cythonext/build.py

      - name: Create sdist
        if: ${{ matrix.python-version == '3.9' }}
        run: python setup.py sdist

      - name: Build manylinux2014
        run: |
          docker run --rm \
          -e PYVER=$(python -c "import sys; print('%s%s' % (sys.version_info.major, sys.version_info.minor))") \
          -v `pwd`:/io jopohl/urh_manylinux2014 /io/data/make_manylinux2014_wheels.sh

      - name: Check wheel
        run: |
          pip install dist/*.whl
          urh --version
          xvfb-run urh autoclose

      - name: Check native backends
        run: python data/check_native_backends.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

      - name: Run pytest with coverage
        if: ${{ matrix.python-version == '3.9' }}
        run: |
          touch tests/show_gui
          cp tests/.coveragerc .
          pytest -s -v --junitxml=junit/test-results.xml --cov=src --cov-config=.coveragerc tests
          coverage xml
          coverage html

      - name: Run pytest without coverage
        if: ${{ matrix.python-version != '3.9' }}
        run: pytest -s -v --junitxml=junit/test-results.xml tests

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: junit/**/*.xml

      - name: Upload to PyPi
        if: startsWith(github.ref, 'refs/tags/')
        run: twine upload --skip-existing dist/*
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"
