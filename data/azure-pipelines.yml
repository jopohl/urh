trigger:
- master
- refs/tags/v*

jobs:

- job: 'Linux'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install -r data/requirements.txt
      sudo apt-get install libhackrf-dev librtlsdr-dev xvfb
      pip install twine setuptools wheel pytest pytest-xvfb pytest-cov pytest-xdist
      python -c "import tempfile, os; open(os.path.join(tempfile.gettempdir(), 'urh_releasing'), 'w').close()"
    displayName: 'Install dependencies'

  - script: python setup.py build_ext --inplace
    displayName: "Build extensions"
  
  - script: python setup.py sdist
    displayName: "Build sdist"
    condition: eq(variables['python.version'], '3.7')

  - script: twine upload --skip-existing dist/*.gz
    displayName: "Upload sdist to PyPi"
    condition: and(eq(variables['python.version'], '3.7'), contains(variables['Build.SourceBranch'], 'refs/tags/'))
    env:
      TWINE_USERNAME: $(twine.username)
      TWINE_PASSWORD: $(twine.password)
      TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"

  - task: PublishBuildArtifacts@1
    condition: eq(variables['python.version'], '3.7')
    inputs:
      pathtoPublish: dist/
      artifactName: 'dist'
    displayName: "Publish Build Artifacts"

  - script: |
      touch tests/show_gui
      cp tests/.coveragerc .
      pytest --junitxml=junit/test-results.xml --cov=src --cov-config=.coveragerc tests
    displayName: 'Run pytest with coverage'
    condition: eq(variables['python.version'], '3.7')

  - script: |
      coverage xml
      coverage html
    displayName: 'Generate coverage report'
    condition: eq(variables['python.version'], '3.7')

  - script: pytest --junitxml=junit/test-results.xml tests
    displayName: 'Run pytest without coverage'
    condition: ne(variables['python.version'], '3.7')

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
    condition: eq(variables['python.version'], '3.7')

  - task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@5
    displayName: 'Check coverage'
    condition: eq(variables['python.version'], '3.7')
    inputs:
      checkCoverage: true
      allowCoverageVariance: true
      coverageVariance: 0.4
      coverageDeltaType: percentage
      coverageType: lines
      baseBranchRef: refs/heads/master

  - script: |
      pip install .
      urh --version
      xvfb-run urh autoclose
    displayName: 'Testrun'

- job: 'Windows'
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python37-64:
        python.version: '3.7'
        python.arch: 'x64'
      Python37-32:
        python.version: '3.7'
        python.arch: 'x86'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: '$(python.arch)'

  - powershell: |
      git clone --depth 1 https://gitlab.com/jopohl/sdr_drivers
      if ("$(python.arch)" -eq "x86") {
      Copy-Item "sdr_drivers\win-32.zip" -Destination "C:\windlls.zip"
      }
      else {
      Copy-Item "sdr_drivers\win-64.zip" -Destination "C:\windlls.zip"
      }
      Copy-Item "sdr_drivers\*.whl"  -Destination "C:\"
    displayName: 'download SDR drivers'

  - script: |
      python -m pip install --upgrade pip
      pip install -r data/requirements.txt
      pip install pytest pytest-faulthandler
    displayName: 'Install dependencies'

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'C:\windlls.zip'
      destinationFolder: src\urh\dev\native\lib\shared
      #cleanDestinationFolder: true

  - script: python setup.py build_ext --inplace
    displayName: "Build extensions"

  - script: |
      pip install --upgrade wheel twine six appdirs packaging setuptools pyinstaller pywin32
      pip install "pyaudio; python_version < '3.7'"
      pip install "C:\PyAudio-0.2.11-cp37-cp37m-win_amd64.whl; python_version == '3.7'"
      pip install "C:\PyAudio-0.2.11-cp37-cp37m-win32.whl; python_version == '3.7'"
      python -c "import tempfile, os; open(os.path.join(tempfile.gettempdir(), 'urh_releasing'), 'w').close()"
    displayName: "Install build dependencies"

  - script: python setup.py bdist_wheel
    displayName: "Build python wheel"

  - script: |
      python data/pyinstaller_helper.py
      for /f %%i in ('python src/urh/version.py') do set URHVERSION=%%i
      iscc /dMyAppVersion=%URHVERSION% /dArch=$(python.arch) data/inno.iss
    condition: or(contains(variables['Build.SourceBranch'], 'refs/tags/'), eq(variables['python.arch'], 'x64'))
    displayName: "Create setup.exe"

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: dist/
      artifactName: 'dist'
    displayName: "Publish Build Artifacts"

  - script: twine upload --skip-existing dist/*.whl
    displayName: "Upload wheel to PyPi"
    condition: contains(variables['Build.SourceBranch'], 'refs/tags/')
    env:
      TWINE_USERNAME: $(twine.username)
      TWINE_PASSWORD: $(twine.password)
      TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"

  - task: GitHubRelease@0
    displayName: 'GitHub release'
    condition: contains(variables['Build.SourceBranch'], 'refs/tags/')
    inputs:
      gitHubConnection: 'github connection 1'
      action: 'edit'
      tag: $(Build.SourceBranchName)
      repositoryName: jopohl/urh
      assets: 'dist/*.exe'
      assetUploadMode: 'replace'
      addChangeLog: true

  - script: pytest -s -v --junitxml=junit/test-results.xml tests
    displayName: 'Run pytest'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'

  - script: |
      pip install .
      urh --version
      urh autoclose
    displayName: 'Testrun'

- job: 'OSX'
  pool:
    vmImage: 'macOS-10.14'

  strategy:
    matrix:
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - script: |
      git clone --depth 1 https://gitlab.com/jopohl/sdr_drivers
      mkdir src/urh/dev/native/lib/shared
      tar xf sdr_drivers/osx-64.tar.bz2 -C src/urh/dev/native/lib/shared
      mkdir /tmp/osx-64
      tar xf sdr_drivers/osx-64.tar.bz2 -C /tmp/osx-64
      rm -rf sdr_drivers
    displayName: "download and unpack SDR drivers"

  - script: |
      python -m pip install --upgrade pip
      pip install -r data/requirements.txt
      pip install pytest pytest-faulthandler
    displayName: 'Install dependencies'

  - script: |
      brew install portaudio hackrf librtlsdr airspy
      pip install --upgrade wheel twine six appdirs packaging setuptools pyinstaller pyaudio
      python -c "import tempfile, os; open(os.path.join(tempfile.gettempdir(), 'urh_releasing'), 'w').close()"
    displayName: "Install build dependencies"

  - script: |
      brew install boost
      cd /tmp
      wget https://github.com/libusb/libusb/releases/download/v1.0.22/libusb-1.0.22.tar.bz2
      tar xf libusb-1.0.22.tar.bz2
      cd libusb-1.0.22
      ./configure
      make
      sudo make install
    displayName: "Install libusb and boost"

  - script: python setup.py build_ext --inplace
    displayName: "Build extensions"

  - script: python setup.py bdist_wheel
    displayName: "Build python wheel"

  - script: python data/pyinstaller_helper.py
    displayName: "Run PyInstaller"

  - script: |
      mkdir -p dist
      hdiutil create -volname Universal.Radio.Hacker \
                     -srcfolder pyinstaller/urh.app \
                     -ov -format UDZO \
                     dist/Universal.Radio.Hacker-"$(python src/urh/version.py)".dmg
    displayName: "Build DMG"

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: dist/
      artifactName: 'dist'
    displayName: "Publish Build Artifacts"

  - task: GitHubRelease@0
    displayName: 'GitHub release'
    condition: contains(variables['Build.SourceBranch'], 'refs/tags/')
    inputs:
      gitHubConnection: 'github connection 1'
      action: 'edit'
      tag: $(Build.SourceBranchName)
      repositoryName: jopohl/urh
      assets: 'dist/*.dmg'
      assetUploadMode: 'replace'
      addChangeLog: true

  - script: twine upload --skip-existing dist/*.whl
    displayName: "Upload wheel to PyPi"
    condition: contains(variables['Build.SourceBranch'], 'refs/tags/')
    env:
      TWINE_USERNAME: $(twine.username)
      TWINE_PASSWORD: $(twine.password)
      TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"

  - script: pytest -s -v --junitxml=junit/test-results.xml tests
    displayName: 'Run pytest'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'

  - script: |
      pip install .
      urh --version
      urh autoclose
    displayName: 'Test run'
