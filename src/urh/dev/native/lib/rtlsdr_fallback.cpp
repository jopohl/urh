/* Generated by Cython 0.27.3 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/home/joe/GIT/urh/src/urh/dev/native/includes/rtl-sdr.h"
        ],
        "include_dirs": [
            "/home/joe/GIT/urh/src/urh/dev/native/includes"
        ],
        "language": "c++",
        "libraries": [
            "rtlsdr"
        ],
        "name": "urh.dev.native.lib.rtlsdr_fallback",
        "sources": [
            "src/urh/dev/native/lib/rtlsdr_fallback.pyx"
        ]
    },
    "module_name": "urh.dev.native.lib.rtlsdr_fallback"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_27_3"
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__src__urh__dev__native__lib__rtlsdr_fallback
#define __PYX_HAVE_API__src__urh__dev__native__lib__rtlsdr_fallback
#include "rtl-sdr.h"
#include <string.h>
#include <stdlib.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src/urh/dev/native/lib/rtlsdr_fallback.pyx",
};

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":7
 * from libc.stdlib cimport malloc
 * 
 * ctypedef unsigned char uint8_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned short uint16_t
 * ctypedef unsigned int  uint32_t
 */
typedef unsigned char __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint8_t;

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":8
 * 
 * ctypedef unsigned char uint8_t
 * ctypedef unsigned short uint16_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned int  uint32_t
 * ctypedef unsigned long long uint64_t
 */
typedef unsigned short __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint16_t;

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":9
 * ctypedef unsigned char uint8_t
 * ctypedef unsigned short uint16_t
 * ctypedef unsigned int  uint32_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned long long uint64_t
 * 
 */
typedef unsigned int __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t;

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":10
 * ctypedef unsigned short uint16_t
 * ctypedef unsigned int  uint32_t
 * ctypedef unsigned long long uint64_t             # <<<<<<<<<<<<<<
 * 
 * cdef crtlsdr.rtlsdr_dev_t*_c_device
 */
typedef unsigned PY_LONG_LONG __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint64_t;

/*--- Type declarations ---*/
struct __pyx_opt_args_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_read_sync;

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":279
 *     return crtlsdr.rtlsdr_reset_buffer(_c_device)
 * 
 * cpdef bytes read_sync(int num_samples=8 * 32 * 512):             # <<<<<<<<<<<<<<
 *     """
 *     The raw, captured IQ data is 8 bit unsigned data.
 */
struct __pyx_opt_args_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_read_sync {
  int __pyx_n;
  int num_samples;
};

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* IncludeStringH.proto */
#include <string.h>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_rtlsdr_tuner(rtlsdr_tuner value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'crtlsdr' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'src.urh.dev.native.lib.rtlsdr_fallback' */
static rtlsdr_dev_t *__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device;
static void __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_callback_recv(unsigned char *, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t, void *); /*proto*/
static __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_device_count(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_device_name(__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_device_usb_strings(__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_index_by_serial(PyObject *, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_open(__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_close(int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_xtal_freq(__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_xtal_freq(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_usb_strings(int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_center_freq(__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t, int __pyx_skip_dispatch); /*proto*/
static __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_center_freq(int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_freq_correction(int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_freq_correction(int __pyx_skip_dispatch); /*proto*/
static rtlsdr_tuner __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_tuner_type(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_tuner_gains(int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_tuner_gain(int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_tuner_gain(int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_tuner_if_gain(int, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_tuner_gain_mode(int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_sample_rate(__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t, int __pyx_skip_dispatch); /*proto*/
static __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_sample_rate(int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_agc_mode(int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_direct_sampling(int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_direct_sampling(int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_offset_tuning(int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_offset_tuning(int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_reset_buffer(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_read_sync(int __pyx_skip_dispatch, struct __pyx_opt_args_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_read_sync *__pyx_optional_args); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_read_async(PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_cancel_async(int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "src.urh.dev.native.lib.rtlsdr_fallback"
extern int __pyx_module_is_main_src__urh__dev__native__lib__rtlsdr_fallback;
int __pyx_module_is_main_src__urh__dev__native__lib__rtlsdr_fallback = 0;

/* Implementation of 'src.urh.dev.native.lib.rtlsdr_fallback' */
static PyObject *__pyx_builtin_range;
static const char __pyx_k_f[] = "f";
static const char __pyx_k_gain[] = "gain";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_stage[] = "stage";
static const char __pyx_k_callback[] = "callback";
static const char __pyx_k_rtl_freq[] = "rtl_freq";
static const char __pyx_k_connection[] = "connection";
static const char __pyx_k_tuner_freq[] = "tuner_freq";
static const char __pyx_k_num_samples[] = "num_samples";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static PyObject *__pyx_n_s_callback;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_connection;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_gain;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_num_samples;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rtl_freq;
static PyObject *__pyx_n_s_stage;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tuner_freq;
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_device_count(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_2get_device_name(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_index); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_4get_device_usb_strings(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_index); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_6get_index_by_serial(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_serial); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_8open(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_index); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_10close(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_12set_xtal_freq(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_rtl_freq, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_tuner_freq); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_14get_xtal_freq(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_16get_usb_strings(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_18set_center_freq(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_freq); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_20get_center_freq(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_22set_freq_correction(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ppm); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_24get_freq_correction(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_26get_tuner_type(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_28get_tuner_gains(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_30set_tuner_gain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_gain); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_32get_tuner_gain(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_34set_tuner_if_gain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_stage, int __pyx_v_gain); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_36set_tuner_gain_mode(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_manual); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_38set_sample_rate(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_sample_rate); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_40get_sample_rate(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_42set_agc_mode(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_on); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_44set_direct_sampling(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_on); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_46get_direct_sampling(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_48set_offset_tuning(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_on); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_50get_offset_tuning(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_52reset_buffer(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_54read_sync(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_num_samples); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_56read_async(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_callback, PyObject *__pyx_v_connection); /* proto */
static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_58cancel_async(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_k__4;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":14
 * cdef crtlsdr.rtlsdr_dev_t*_c_device
 * 
 * cdef void _c_callback_recv(unsigned char *buffer, uint32_t length, void *ctx):             # <<<<<<<<<<<<<<
 *     global f
 *     conn = <object> ctx
 */

static void __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_callback_recv(unsigned char *__pyx_v_buffer, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_length, void *__pyx_v_ctx) {
  CYTHON_UNUSED PyObject *__pyx_v_conn = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_c_callback_recv", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":16
 * cdef void _c_callback_recv(unsigned char *buffer, uint32_t length, void *ctx):
 *     global f
 *     conn = <object> ctx             # <<<<<<<<<<<<<<
 *     (<object>f)(buffer[0:length])
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_ctx);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_conn = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":17
 *     global f
 *     conn = <object> ctx
 *     (<object>f)(buffer[0:length])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_f); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_buffer) + 0, __pyx_v_length - 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_t_2));
  __pyx_t_4 = __pyx_t_2; __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 17, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":14
 * cdef crtlsdr.rtlsdr_dev_t*_c_device
 * 
 * cdef void _c_callback_recv(unsigned char *buffer, uint32_t length, void *ctx):             # <<<<<<<<<<<<<<
 *     global f
 *     conn = <object> ctx
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("src.urh.dev.native.lib.rtlsdr_fallback._c_callback_recv", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_conn);
  __Pyx_RefNannyFinishContext();
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":20
 * 
 * 
 * cpdef uint32_t get_device_count():             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_get_device_count()
 * 
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_1get_device_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_device_count(CYTHON_UNUSED int __pyx_skip_dispatch) {
  __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_device_count", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":21
 * 
 * cpdef uint32_t get_device_count():
 *     return crtlsdr.rtlsdr_get_device_count()             # <<<<<<<<<<<<<<
 * 
 * cpdef str get_device_name(uint32_t index):
 */
  __pyx_r = rtlsdr_get_device_count();
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":20
 * 
 * 
 * cpdef uint32_t get_device_count():             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_get_device_count()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_1get_device_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_1get_device_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_device_count (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_device_count(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_device_count(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_device_count", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_device_count(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_device_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":23
 *     return crtlsdr.rtlsdr_get_device_count()
 * 
 * cpdef str get_device_name(uint32_t index):             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_get_device_name(index).decode('UTF-8')
 * 
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_3get_device_name(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_device_name(__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_index, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_device_name", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":24
 * 
 * cpdef str get_device_name(uint32_t index):
 *     return crtlsdr.rtlsdr_get_device_name(index).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple get_device_usb_strings(uint32_t index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = rtlsdr_get_device_name(__pyx_v_index);
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_t_1, 0, strlen(__pyx_t_1), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_INCREF(__pyx_t_2);
  __pyx_r = ((PyObject*)__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":23
 *     return crtlsdr.rtlsdr_get_device_count()
 * 
 * cpdef str get_device_name(uint32_t index):             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_get_device_name(index).decode('UTF-8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_device_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_3get_device_name(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_3get_device_name(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_index;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_device_name (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_unsigned_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 23, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_device_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_2get_device_name(__pyx_self, ((__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_2get_device_name(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_device_name", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_device_name(__pyx_v_index, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_device_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":26
 *     return crtlsdr.rtlsdr_get_device_name(index).decode('UTF-8')
 * 
 * cpdef tuple get_device_usb_strings(uint32_t index):             # <<<<<<<<<<<<<<
 *     """
 * 
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_5get_device_usb_strings(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_device_usb_strings(__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_index, CYTHON_UNUSED int __pyx_skip_dispatch) {
  char *__pyx_v_manufacturer;
  char *__pyx_v_product;
  char *__pyx_v_serial;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_device_usb_strings", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":32
 *     :return: manufacturer name, product name, serial serial number on success else None, None, None
 *     """
 *     cdef char *manufacturer = <char *> malloc(256 * sizeof(char))             # <<<<<<<<<<<<<<
 *     cdef char *product = <char *> malloc(256 * sizeof(char))
 *     cdef char *serial = <char *> malloc(256 * sizeof(char))
 */
  __pyx_v_manufacturer = ((char *)malloc((0x100 * (sizeof(char)))));

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":33
 *     """
 *     cdef char *manufacturer = <char *> malloc(256 * sizeof(char))
 *     cdef char *product = <char *> malloc(256 * sizeof(char))             # <<<<<<<<<<<<<<
 *     cdef char *serial = <char *> malloc(256 * sizeof(char))
 *     result = crtlsdr.rtlsdr_get_device_usb_strings(index, manufacturer, product, serial)
 */
  __pyx_v_product = ((char *)malloc((0x100 * (sizeof(char)))));

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":34
 *     cdef char *manufacturer = <char *> malloc(256 * sizeof(char))
 *     cdef char *product = <char *> malloc(256 * sizeof(char))
 *     cdef char *serial = <char *> malloc(256 * sizeof(char))             # <<<<<<<<<<<<<<
 *     result = crtlsdr.rtlsdr_get_device_usb_strings(index, manufacturer, product, serial)
 *     if result == 0:
 */
  __pyx_v_serial = ((char *)malloc((0x100 * (sizeof(char)))));

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":35
 *     cdef char *product = <char *> malloc(256 * sizeof(char))
 *     cdef char *serial = <char *> malloc(256 * sizeof(char))
 *     result = crtlsdr.rtlsdr_get_device_usb_strings(index, manufacturer, product, serial)             # <<<<<<<<<<<<<<
 *     if result == 0:
 *         return manufacturer.decode('UTF-8'), product.decode('UTF-8'), serial.decode('UTF-8')
 */
  __pyx_v_result = rtlsdr_get_device_usb_strings(__pyx_v_index, __pyx_v_manufacturer, __pyx_v_product, __pyx_v_serial);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":36
 *     cdef char *serial = <char *> malloc(256 * sizeof(char))
 *     result = crtlsdr.rtlsdr_get_device_usb_strings(index, manufacturer, product, serial)
 *     if result == 0:             # <<<<<<<<<<<<<<
 *         return manufacturer.decode('UTF-8'), product.decode('UTF-8'), serial.decode('UTF-8')
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_result == 0) != 0);
  if (__pyx_t_1) {

    /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":37
 *     result = crtlsdr.rtlsdr_get_device_usb_strings(index, manufacturer, product, serial)
 *     if result == 0:
 *         return manufacturer.decode('UTF-8'), product.decode('UTF-8'), serial.decode('UTF-8')             # <<<<<<<<<<<<<<
 *     else:
 *         return None, None, None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_manufacturer, 0, strlen(__pyx_v_manufacturer), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_product, 0, strlen(__pyx_v_product), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_serial, 0, strlen(__pyx_v_serial), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":36
 *     cdef char *serial = <char *> malloc(256 * sizeof(char))
 *     result = crtlsdr.rtlsdr_get_device_usb_strings(index, manufacturer, product, serial)
 *     if result == 0:             # <<<<<<<<<<<<<<
 *         return manufacturer.decode('UTF-8'), product.decode('UTF-8'), serial.decode('UTF-8')
 *     else:
 */
  }

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":39
 *         return manufacturer.decode('UTF-8'), product.decode('UTF-8'), serial.decode('UTF-8')
 *     else:
 *         return None, None, None             # <<<<<<<<<<<<<<
 * 
 * cpdef int get_index_by_serial(str serial):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_tuple_);
    __pyx_r = __pyx_tuple_;
    goto __pyx_L0;
  }

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":26
 *     return crtlsdr.rtlsdr_get_device_name(index).decode('UTF-8')
 * 
 * cpdef tuple get_device_usb_strings(uint32_t index):             # <<<<<<<<<<<<<<
 *     """
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_device_usb_strings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_5get_device_usb_strings(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_4get_device_usb_strings[] = "\n\n    :param index: index of the device\n    :return: manufacturer name, product name, serial serial number on success else None, None, None\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_5get_device_usb_strings(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_index;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_device_usb_strings (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_unsigned_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 26, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_device_usb_strings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_4get_device_usb_strings(__pyx_self, ((__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_4get_device_usb_strings(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_device_usb_strings", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_device_usb_strings(__pyx_v_index, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_device_usb_strings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":41
 *         return None, None, None
 * 
 * cpdef int get_index_by_serial(str serial):             # <<<<<<<<<<<<<<
 *     """
 *     Get device index by USB serial string descriptor.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_7get_index_by_serial(PyObject *__pyx_self, PyObject *__pyx_v_serial); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_index_by_serial(PyObject *__pyx_v_serial, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_serial_byte_string = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  __Pyx_RefNannySetupContext("get_index_by_serial", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":51
 *              -3 if devices were found, but none with matching name
 *     """
 *     serial_byte_string = serial.encode('UTF-8')             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_get_index_by_serial(<char *> serial_byte_string)
 * 
 */
  if (unlikely(__pyx_v_serial == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 51, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_serial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_serial_byte_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":52
 *     """
 *     serial_byte_string = serial.encode('UTF-8')
 *     return crtlsdr.rtlsdr_get_index_by_serial(<char *> serial_byte_string)             # <<<<<<<<<<<<<<
 * 
 * cpdef int open(uint32_t index):
 */
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_serial_byte_string); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_r = rtlsdr_get_index_by_serial(((char *)__pyx_t_2));
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":41
 *         return None, None, None
 * 
 * cpdef int get_index_by_serial(str serial):             # <<<<<<<<<<<<<<
 *     """
 *     Get device index by USB serial string descriptor.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("src.urh.dev.native.lib.rtlsdr_fallback.get_index_by_serial", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_serial_byte_string);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_7get_index_by_serial(PyObject *__pyx_self, PyObject *__pyx_v_serial); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_6get_index_by_serial[] = "\n    Get device index by USB serial string descriptor.\n\n    :param serial: serial string of the device\n    :return: device index of first device where the name matched\n             -1 if name is NULL\n             -2 if no devices were found at all\n             -3 if devices were found, but none with matching name\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_7get_index_by_serial(PyObject *__pyx_self, PyObject *__pyx_v_serial) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_index_by_serial (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_serial), (&PyUnicode_Type), 1, "serial", 1))) __PYX_ERR(0, 41, __pyx_L1_error)
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_6get_index_by_serial(__pyx_self, ((PyObject*)__pyx_v_serial));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_6get_index_by_serial(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_serial) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_index_by_serial", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_index_by_serial(__pyx_v_serial, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_index_by_serial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":54
 *     return crtlsdr.rtlsdr_get_index_by_serial(<char *> serial_byte_string)
 * 
 * cpdef int open(uint32_t index):             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_open(&_c_device, index)
 * 
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_9open(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_open(__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_index, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":55
 * 
 * cpdef int open(uint32_t index):
 *     return crtlsdr.rtlsdr_open(&_c_device, index)             # <<<<<<<<<<<<<<
 * 
 * cpdef int close():
 */
  __pyx_r = rtlsdr_open((&__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device), __pyx_v_index);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":54
 *     return crtlsdr.rtlsdr_get_index_by_serial(<char *> serial_byte_string)
 * 
 * cpdef int open(uint32_t index):             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_open(&_c_device, index)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_9open(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_9open(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_index;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_unsigned_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.open", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_8open(__pyx_self, ((__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_8open(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("open", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_open(__pyx_v_index, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.open", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":57
 *     return crtlsdr.rtlsdr_open(&_c_device, index)
 * 
 * cpdef int close():             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_close(_c_device)
 * 
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_11close(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_close(CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":58
 * 
 * cpdef int close():
 *     return crtlsdr.rtlsdr_close(_c_device)             # <<<<<<<<<<<<<<
 * 
 * cpdef int set_xtal_freq(uint32_t rtl_freq, uint32_t tuner_freq):
 */
  __pyx_r = rtlsdr_close(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":57
 *     return crtlsdr.rtlsdr_open(&_c_device, index)
 * 
 * cpdef int close():             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_close(_c_device)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_11close(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_11close(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_10close(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_10close(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("close", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_close(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":60
 *     return crtlsdr.rtlsdr_close(_c_device)
 * 
 * cpdef int set_xtal_freq(uint32_t rtl_freq, uint32_t tuner_freq):             # <<<<<<<<<<<<<<
 *     """
 *      Set crystal oscillator frequencies used for the RTL2832 and the tuner IC.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_13set_xtal_freq(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_xtal_freq(__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_rtl_freq, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_tuner_freq, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_xtal_freq", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":74
 *     :return: 0 on success
 *     """
 *     return crtlsdr.rtlsdr_set_xtal_freq(_c_device, rtl_freq, tuner_freq)             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple get_xtal_freq():
 */
  __pyx_r = rtlsdr_set_xtal_freq(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, __pyx_v_rtl_freq, __pyx_v_tuner_freq);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":60
 *     return crtlsdr.rtlsdr_close(_c_device)
 * 
 * cpdef int set_xtal_freq(uint32_t rtl_freq, uint32_t tuner_freq):             # <<<<<<<<<<<<<<
 *     """
 *      Set crystal oscillator frequencies used for the RTL2832 and the tuner IC.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_13set_xtal_freq(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_12set_xtal_freq[] = "\n     Set crystal oscillator frequencies used for the RTL2832 and the tuner IC.\n\n    Usually both ICs use the same clock. Changing the clock may make sense if\n    you are applying an external clock to the tuner or to compensate the\n    frequency (and samplerate) error caused by the original (cheap) crystal.\n\n    NOTE: Call this function only if you fully understand the implications.\n\n    :param rtl_freq: frequency value used to clock the RTL2832 in Hz\n    :param tuner_freq: frequency value used to clock the tuner IC in Hz\n    :return: 0 on success\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_13set_xtal_freq(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_rtl_freq;
  __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_tuner_freq;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_xtal_freq (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rtl_freq,&__pyx_n_s_tuner_freq,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rtl_freq)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tuner_freq)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_xtal_freq", 1, 2, 2, 1); __PYX_ERR(0, 60, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_xtal_freq") < 0)) __PYX_ERR(0, 60, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_rtl_freq = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_rtl_freq == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 60, __pyx_L3_error)
    __pyx_v_tuner_freq = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_tuner_freq == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 60, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_xtal_freq", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 60, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_xtal_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_12set_xtal_freq(__pyx_self, __pyx_v_rtl_freq, __pyx_v_tuner_freq);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_12set_xtal_freq(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_rtl_freq, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_tuner_freq) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_xtal_freq", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_xtal_freq(__pyx_v_rtl_freq, __pyx_v_tuner_freq, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_xtal_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":76
 *     return crtlsdr.rtlsdr_set_xtal_freq(_c_device, rtl_freq, tuner_freq)
 * 
 * cpdef tuple get_xtal_freq():             # <<<<<<<<<<<<<<
 *     """
 *     Get crystal oscillator frequencies used for the RTL2832 and the tuner IC.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_15get_xtal_freq(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_xtal_freq(CYTHON_UNUSED int __pyx_skip_dispatch) {
  __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_rtl_freq;
  __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_tuner_freq;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_xtal_freq", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":84
 *              tuner_freq frequency value used to clock the tuner IC in Hz
 *     """
 *     cdef uint32_t rtl_freq = 0             # <<<<<<<<<<<<<<
 *     cdef uint32_t tuner_freq = 0
 *     result = crtlsdr.rtlsdr_get_xtal_freq(_c_device, &rtl_freq, &tuner_freq)
 */
  __pyx_v_rtl_freq = 0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":85
 *     """
 *     cdef uint32_t rtl_freq = 0
 *     cdef uint32_t tuner_freq = 0             # <<<<<<<<<<<<<<
 *     result = crtlsdr.rtlsdr_get_xtal_freq(_c_device, &rtl_freq, &tuner_freq)
 * 
 */
  __pyx_v_tuner_freq = 0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":86
 *     cdef uint32_t rtl_freq = 0
 *     cdef uint32_t tuner_freq = 0
 *     result = crtlsdr.rtlsdr_get_xtal_freq(_c_device, &rtl_freq, &tuner_freq)             # <<<<<<<<<<<<<<
 * 
 *     if result == 0:
 */
  __pyx_v_result = rtlsdr_get_xtal_freq(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, (&__pyx_v_rtl_freq), (&__pyx_v_tuner_freq));

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":88
 *     result = crtlsdr.rtlsdr_get_xtal_freq(_c_device, &rtl_freq, &tuner_freq)
 * 
 *     if result == 0:             # <<<<<<<<<<<<<<
 *         return rtl_freq, tuner_freq
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_result == 0) != 0);
  if (__pyx_t_1) {

    /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":89
 * 
 *     if result == 0:
 *         return rtl_freq, tuner_freq             # <<<<<<<<<<<<<<
 *     else:
 *         return None, None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_rtl_freq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_tuner_freq); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":88
 *     result = crtlsdr.rtlsdr_get_xtal_freq(_c_device, &rtl_freq, &tuner_freq)
 * 
 *     if result == 0:             # <<<<<<<<<<<<<<
 *         return rtl_freq, tuner_freq
 *     else:
 */
  }

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":91
 *         return rtl_freq, tuner_freq
 *     else:
 *         return None, None             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple get_usb_strings():
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_tuple__2);
    __pyx_r = __pyx_tuple__2;
    goto __pyx_L0;
  }

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":76
 *     return crtlsdr.rtlsdr_set_xtal_freq(_c_device, rtl_freq, tuner_freq)
 * 
 * cpdef tuple get_xtal_freq():             # <<<<<<<<<<<<<<
 *     """
 *     Get crystal oscillator frequencies used for the RTL2832 and the tuner IC.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_xtal_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_15get_xtal_freq(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_14get_xtal_freq[] = "\n    Get crystal oscillator frequencies used for the RTL2832 and the tuner IC.\n    Usually both ICs use the same clock.\n\n    :return: rtl_freq frequency value used to clock the RTL2832 in Hz,\n             tuner_freq frequency value used to clock the tuner IC in Hz\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_15get_xtal_freq(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_xtal_freq (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_14get_xtal_freq(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_14get_xtal_freq(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_xtal_freq", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_xtal_freq(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_xtal_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":93
 *         return None, None
 * 
 * cpdef tuple get_usb_strings():             # <<<<<<<<<<<<<<
 *     cdef char *manufacturer = <char *> malloc(256 * sizeof(char))
 *     cdef char *product = <char *> malloc(256 * sizeof(char))
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_17get_usb_strings(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_usb_strings(CYTHON_UNUSED int __pyx_skip_dispatch) {
  char *__pyx_v_manufacturer;
  char *__pyx_v_product;
  char *__pyx_v_serial;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_usb_strings", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":94
 * 
 * cpdef tuple get_usb_strings():
 *     cdef char *manufacturer = <char *> malloc(256 * sizeof(char))             # <<<<<<<<<<<<<<
 *     cdef char *product = <char *> malloc(256 * sizeof(char))
 *     cdef char *serial = <char *> malloc(256 * sizeof(char))
 */
  __pyx_v_manufacturer = ((char *)malloc((0x100 * (sizeof(char)))));

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":95
 * cpdef tuple get_usb_strings():
 *     cdef char *manufacturer = <char *> malloc(256 * sizeof(char))
 *     cdef char *product = <char *> malloc(256 * sizeof(char))             # <<<<<<<<<<<<<<
 *     cdef char *serial = <char *> malloc(256 * sizeof(char))
 *     result = crtlsdr.rtlsdr_get_usb_strings(_c_device, manufacturer, product, serial)
 */
  __pyx_v_product = ((char *)malloc((0x100 * (sizeof(char)))));

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":96
 *     cdef char *manufacturer = <char *> malloc(256 * sizeof(char))
 *     cdef char *product = <char *> malloc(256 * sizeof(char))
 *     cdef char *serial = <char *> malloc(256 * sizeof(char))             # <<<<<<<<<<<<<<
 *     result = crtlsdr.rtlsdr_get_usb_strings(_c_device, manufacturer, product, serial)
 *     if result == 0:
 */
  __pyx_v_serial = ((char *)malloc((0x100 * (sizeof(char)))));

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":97
 *     cdef char *product = <char *> malloc(256 * sizeof(char))
 *     cdef char *serial = <char *> malloc(256 * sizeof(char))
 *     result = crtlsdr.rtlsdr_get_usb_strings(_c_device, manufacturer, product, serial)             # <<<<<<<<<<<<<<
 *     if result == 0:
 *         return manufacturer.decode('UTF-8'), product.decode('UTF-8'), serial.decode('UTF-8')
 */
  __pyx_v_result = rtlsdr_get_usb_strings(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, __pyx_v_manufacturer, __pyx_v_product, __pyx_v_serial);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":98
 *     cdef char *serial = <char *> malloc(256 * sizeof(char))
 *     result = crtlsdr.rtlsdr_get_usb_strings(_c_device, manufacturer, product, serial)
 *     if result == 0:             # <<<<<<<<<<<<<<
 *         return manufacturer.decode('UTF-8'), product.decode('UTF-8'), serial.decode('UTF-8')
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_result == 0) != 0);
  if (__pyx_t_1) {

    /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":99
 *     result = crtlsdr.rtlsdr_get_usb_strings(_c_device, manufacturer, product, serial)
 *     if result == 0:
 *         return manufacturer.decode('UTF-8'), product.decode('UTF-8'), serial.decode('UTF-8')             # <<<<<<<<<<<<<<
 *     else:
 *         return None, None, None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_manufacturer, 0, strlen(__pyx_v_manufacturer), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_product, 0, strlen(__pyx_v_product), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_serial, 0, strlen(__pyx_v_serial), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":98
 *     cdef char *serial = <char *> malloc(256 * sizeof(char))
 *     result = crtlsdr.rtlsdr_get_usb_strings(_c_device, manufacturer, product, serial)
 *     if result == 0:             # <<<<<<<<<<<<<<
 *         return manufacturer.decode('UTF-8'), product.decode('UTF-8'), serial.decode('UTF-8')
 *     else:
 */
  }

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":101
 *         return manufacturer.decode('UTF-8'), product.decode('UTF-8'), serial.decode('UTF-8')
 *     else:
 *         return None, None, None             # <<<<<<<<<<<<<<
 * 
 * cpdef int set_center_freq(uint32_t freq):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_tuple__3);
    __pyx_r = __pyx_tuple__3;
    goto __pyx_L0;
  }

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":93
 *         return None, None
 * 
 * cpdef tuple get_usb_strings():             # <<<<<<<<<<<<<<
 *     cdef char *manufacturer = <char *> malloc(256 * sizeof(char))
 *     cdef char *product = <char *> malloc(256 * sizeof(char))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_usb_strings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_17get_usb_strings(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_17get_usb_strings(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_usb_strings (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_16get_usb_strings(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_16get_usb_strings(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_usb_strings", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_usb_strings(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_usb_strings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":103
 *         return None, None, None
 * 
 * cpdef int set_center_freq(uint32_t freq):             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_set_center_freq(_c_device, freq)
 * 
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_19set_center_freq(PyObject *__pyx_self, PyObject *__pyx_arg_freq); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_center_freq(__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_freq, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_center_freq", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":104
 * 
 * cpdef int set_center_freq(uint32_t freq):
 *     return crtlsdr.rtlsdr_set_center_freq(_c_device, freq)             # <<<<<<<<<<<<<<
 * 
 * cpdef uint32_t get_center_freq():
 */
  __pyx_r = rtlsdr_set_center_freq(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, __pyx_v_freq);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":103
 *         return None, None, None
 * 
 * cpdef int set_center_freq(uint32_t freq):             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_set_center_freq(_c_device, freq)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_19set_center_freq(PyObject *__pyx_self, PyObject *__pyx_arg_freq); /*proto*/
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_19set_center_freq(PyObject *__pyx_self, PyObject *__pyx_arg_freq) {
  __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_freq;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_center_freq (wrapper)", 0);
  assert(__pyx_arg_freq); {
    __pyx_v_freq = __Pyx_PyInt_As_unsigned_int(__pyx_arg_freq); if (unlikely((__pyx_v_freq == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_center_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_18set_center_freq(__pyx_self, ((__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t)__pyx_v_freq));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_18set_center_freq(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_freq) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_center_freq", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_center_freq(__pyx_v_freq, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_center_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":106
 *     return crtlsdr.rtlsdr_set_center_freq(_c_device, freq)
 * 
 * cpdef uint32_t get_center_freq():             # <<<<<<<<<<<<<<
 *     """
 *     Get actual frequency the device is tuned to.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_21get_center_freq(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_center_freq(CYTHON_UNUSED int __pyx_skip_dispatch) {
  __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_center_freq", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":112
 *     :return: 0 on error, frequency in Hz otherwise
 *     """
 *     return crtlsdr.rtlsdr_get_center_freq(_c_device)             # <<<<<<<<<<<<<<
 * 
 * cpdef int set_freq_correction(int ppm):
 */
  __pyx_r = rtlsdr_get_center_freq(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":106
 *     return crtlsdr.rtlsdr_set_center_freq(_c_device, freq)
 * 
 * cpdef uint32_t get_center_freq():             # <<<<<<<<<<<<<<
 *     """
 *     Get actual frequency the device is tuned to.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_21get_center_freq(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_20get_center_freq[] = "\n    Get actual frequency the device is tuned to.\n\n    :return: 0 on error, frequency in Hz otherwise\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_21get_center_freq(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_center_freq (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_20get_center_freq(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_20get_center_freq(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_center_freq", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_center_freq(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_center_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":114
 *     return crtlsdr.rtlsdr_get_center_freq(_c_device)
 * 
 * cpdef int set_freq_correction(int ppm):             # <<<<<<<<<<<<<<
 *     """
 *     Set the frequency correction value for the device.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_23set_freq_correction(PyObject *__pyx_self, PyObject *__pyx_arg_ppm); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_freq_correction(int __pyx_v_ppm, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_freq_correction", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":121
 *     :return: 0 on success
 *     """
 *     return crtlsdr.rtlsdr_set_freq_correction(_c_device, ppm)             # <<<<<<<<<<<<<<
 * 
 * cpdef int get_freq_correction():
 */
  __pyx_r = rtlsdr_set_freq_correction(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, __pyx_v_ppm);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":114
 *     return crtlsdr.rtlsdr_get_center_freq(_c_device)
 * 
 * cpdef int set_freq_correction(int ppm):             # <<<<<<<<<<<<<<
 *     """
 *     Set the frequency correction value for the device.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_23set_freq_correction(PyObject *__pyx_self, PyObject *__pyx_arg_ppm); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_22set_freq_correction[] = "\n    Set the frequency correction value for the device.\n\n    :param ppm: ppm correction value in parts per million (ppm)\n    :return: 0 on success\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_23set_freq_correction(PyObject *__pyx_self, PyObject *__pyx_arg_ppm) {
  int __pyx_v_ppm;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_freq_correction (wrapper)", 0);
  assert(__pyx_arg_ppm); {
    __pyx_v_ppm = __Pyx_PyInt_As_int(__pyx_arg_ppm); if (unlikely((__pyx_v_ppm == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_freq_correction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_22set_freq_correction(__pyx_self, ((int)__pyx_v_ppm));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_22set_freq_correction(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ppm) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_freq_correction", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_freq_correction(__pyx_v_ppm, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_freq_correction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":123
 *     return crtlsdr.rtlsdr_set_freq_correction(_c_device, ppm)
 * 
 * cpdef int get_freq_correction():             # <<<<<<<<<<<<<<
 *     """
 *     Get actual frequency correction value of the device.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_25get_freq_correction(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_freq_correction(CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_freq_correction", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":129
 *     :return: correction value in parts per million (ppm)
 *     """
 *     return crtlsdr.rtlsdr_get_freq_correction(_c_device)             # <<<<<<<<<<<<<<
 * 
 * cpdef crtlsdr.rtlsdr_tuner get_tuner_type():
 */
  __pyx_r = rtlsdr_get_freq_correction(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":123
 *     return crtlsdr.rtlsdr_set_freq_correction(_c_device, ppm)
 * 
 * cpdef int get_freq_correction():             # <<<<<<<<<<<<<<
 *     """
 *     Get actual frequency correction value of the device.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_25get_freq_correction(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_24get_freq_correction[] = "\n    Get actual frequency correction value of the device.\n\n    :return: correction value in parts per million (ppm)\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_25get_freq_correction(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_freq_correction (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_24get_freq_correction(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_24get_freq_correction(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_freq_correction", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_freq_correction(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_freq_correction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":131
 *     return crtlsdr.rtlsdr_get_freq_correction(_c_device)
 * 
 * cpdef crtlsdr.rtlsdr_tuner get_tuner_type():             # <<<<<<<<<<<<<<
 *     """
 *     Get the tuner type.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_27get_tuner_type(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static rtlsdr_tuner __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_tuner_type(CYTHON_UNUSED int __pyx_skip_dispatch) {
  rtlsdr_tuner __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tuner_type", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":137
 *     :return: RTLSDR_TUNER_UNKNOWN on error, tuner type otherwise
 *     """
 *     return crtlsdr.rtlsdr_get_tuner_type(_c_device)             # <<<<<<<<<<<<<<
 * 
 * cpdef list get_tuner_gains():
 */
  __pyx_r = rtlsdr_get_tuner_type(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":131
 *     return crtlsdr.rtlsdr_get_freq_correction(_c_device)
 * 
 * cpdef crtlsdr.rtlsdr_tuner get_tuner_type():             # <<<<<<<<<<<<<<
 *     """
 *     Get the tuner type.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_27get_tuner_type(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_26get_tuner_type[] = "\n    Get the tuner type.\n\n    :return: RTLSDR_TUNER_UNKNOWN on error, tuner type otherwise\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_27get_tuner_type(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tuner_type (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_26get_tuner_type(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_26get_tuner_type(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_tuner_type", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_rtlsdr_tuner(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_tuner_type(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_tuner_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":139
 *     return crtlsdr.rtlsdr_get_tuner_type(_c_device)
 * 
 * cpdef list get_tuner_gains():             # <<<<<<<<<<<<<<
 *     """
 *     Get a list of gains supported by the tuner.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_29get_tuner_gains(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_tuner_gains(CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_num_gains;
  int *__pyx_v_gains;
  int __pyx_7genexpr__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_tuner_gains", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":147
 *     :return: gains array of gain values. In tenths of a dB, 115 means 11.5 dB.
 *     """
 *     cdef int num_gains = crtlsdr.rtlsdr_get_tuner_gains(_c_device, NULL)             # <<<<<<<<<<<<<<
 *     if num_gains < 0:
 *         return None
 */
  __pyx_v_num_gains = rtlsdr_get_tuner_gains(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, NULL);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":148
 *     """
 *     cdef int num_gains = crtlsdr.rtlsdr_get_tuner_gains(_c_device, NULL)
 *     if num_gains < 0:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_num_gains < 0) != 0);
  if (__pyx_t_1) {

    /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":149
 *     cdef int num_gains = crtlsdr.rtlsdr_get_tuner_gains(_c_device, NULL)
 *     if num_gains < 0:
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cdef int*gains = <int *> malloc(num_gains * sizeof(int))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = ((PyObject*)Py_None);
    goto __pyx_L0;

    /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":148
 *     """
 *     cdef int num_gains = crtlsdr.rtlsdr_get_tuner_gains(_c_device, NULL)
 *     if num_gains < 0:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":151
 *         return None
 * 
 *     cdef int*gains = <int *> malloc(num_gains * sizeof(int))             # <<<<<<<<<<<<<<
 *     crtlsdr.rtlsdr_get_tuner_gains(_c_device, gains)
 * 
 */
  __pyx_v_gains = ((int *)malloc((__pyx_v_num_gains * (sizeof(int)))));

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":152
 * 
 *     cdef int*gains = <int *> malloc(num_gains * sizeof(int))
 *     crtlsdr.rtlsdr_get_tuner_gains(_c_device, gains)             # <<<<<<<<<<<<<<
 * 
 *     return [gains[i] for i in range(num_gains)]
 */
  rtlsdr_get_tuner_gains(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, __pyx_v_gains);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":154
 *     crtlsdr.rtlsdr_get_tuner_gains(_c_device, gains)
 * 
 *     return [gains[i] for i in range(num_gains)]             # <<<<<<<<<<<<<<
 * 
 * cpdef int set_tuner_gain(int gain):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_v_num_gains;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_7genexpr__pyx_v_i = __pyx_t_4;
      __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_gains[__pyx_7genexpr__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":139
 *     return crtlsdr.rtlsdr_get_tuner_type(_c_device)
 * 
 * cpdef list get_tuner_gains():             # <<<<<<<<<<<<<<
 *     """
 *     Get a list of gains supported by the tuner.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_tuner_gains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_29get_tuner_gains(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_28get_tuner_gains[] = "\n    Get a list of gains supported by the tuner.\n    NOTE: The gains argument must be preallocated by the caller. If NULL is\n    being given instead, the number of available gain values will be returned.\n\n    :return: gains array of gain values. In tenths of a dB, 115 means 11.5 dB.\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_29get_tuner_gains(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tuner_gains (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_28get_tuner_gains(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_28get_tuner_gains(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_tuner_gains", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_tuner_gains(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_tuner_gains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":156
 *     return [gains[i] for i in range(num_gains)]
 * 
 * cpdef int set_tuner_gain(int gain):             # <<<<<<<<<<<<<<
 *     """
 *     Set the gain for the device.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_31set_tuner_gain(PyObject *__pyx_self, PyObject *__pyx_arg_gain); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_tuner_gain(int __pyx_v_gain, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_tuner_gain", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":170
 *     :return: 0 on success
 *     """
 *     return crtlsdr.rtlsdr_set_tuner_gain(_c_device, gain)             # <<<<<<<<<<<<<<
 * 
 * cpdef int get_tuner_gain():
 */
  __pyx_r = rtlsdr_set_tuner_gain(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, __pyx_v_gain);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":156
 *     return [gains[i] for i in range(num_gains)]
 * 
 * cpdef int set_tuner_gain(int gain):             # <<<<<<<<<<<<<<
 *     """
 *     Set the gain for the device.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_31set_tuner_gain(PyObject *__pyx_self, PyObject *__pyx_arg_gain); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_30set_tuner_gain[] = "\n    Set the gain for the device.\n    Manual gain mode must be enabled for this to work.\n\n    Valid gain values (in tenths of a dB) for the E4000 tuner:\n    -10, 15, 40, 65, 90, 115, 140, 165, 190,\n    215, 240, 290, 340, 420, 430, 450, 470, 490\n\n    Valid gain values may be queried with rtlsdr_get_tuner_gains function.\n\n    :param gain: gain in tenths of a dB, 115 means 11.5 dB.\n    :return: 0 on success\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_31set_tuner_gain(PyObject *__pyx_self, PyObject *__pyx_arg_gain) {
  int __pyx_v_gain;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_tuner_gain (wrapper)", 0);
  assert(__pyx_arg_gain); {
    __pyx_v_gain = __Pyx_PyInt_As_int(__pyx_arg_gain); if (unlikely((__pyx_v_gain == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 156, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_tuner_gain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_30set_tuner_gain(__pyx_self, ((int)__pyx_v_gain));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_30set_tuner_gain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_gain) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_tuner_gain", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_tuner_gain(__pyx_v_gain, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_tuner_gain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":172
 *     return crtlsdr.rtlsdr_set_tuner_gain(_c_device, gain)
 * 
 * cpdef int get_tuner_gain():             # <<<<<<<<<<<<<<
 *     """
 *     Get actual gain the device is configured to.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_33get_tuner_gain(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_tuner_gain(CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tuner_gain", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":178
 *     :return: 0 on error, gain in tenths of a dB, 115 means 11.5 dB.
 *     """
 *     return crtlsdr.rtlsdr_get_tuner_gain(_c_device)             # <<<<<<<<<<<<<<
 * 
 * cpdef int set_tuner_if_gain(int stage, int gain):
 */
  __pyx_r = rtlsdr_get_tuner_gain(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":172
 *     return crtlsdr.rtlsdr_set_tuner_gain(_c_device, gain)
 * 
 * cpdef int get_tuner_gain():             # <<<<<<<<<<<<<<
 *     """
 *     Get actual gain the device is configured to.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_33get_tuner_gain(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_32get_tuner_gain[] = "\n    Get actual gain the device is configured to.\n\n    :return: 0 on error, gain in tenths of a dB, 115 means 11.5 dB.\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_33get_tuner_gain(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tuner_gain (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_32get_tuner_gain(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_32get_tuner_gain(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_tuner_gain", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_tuner_gain(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_tuner_gain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":180
 *     return crtlsdr.rtlsdr_get_tuner_gain(_c_device)
 * 
 * cpdef int set_tuner_if_gain(int stage, int gain):             # <<<<<<<<<<<<<<
 *     """
 *     Set the intermediate frequency gain for the device.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_35set_tuner_if_gain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_tuner_if_gain(int __pyx_v_stage, int __pyx_v_gain, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_tuner_if_gain", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":188
 *     :return: 0 on success
 *     """
 *     return crtlsdr.rtlsdr_set_tuner_if_gain(_c_device, stage, gain)             # <<<<<<<<<<<<<<
 * 
 * cpdef int set_tuner_gain_mode(int manual):
 */
  __pyx_r = rtlsdr_set_tuner_if_gain(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, __pyx_v_stage, __pyx_v_gain);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":180
 *     return crtlsdr.rtlsdr_get_tuner_gain(_c_device)
 * 
 * cpdef int set_tuner_if_gain(int stage, int gain):             # <<<<<<<<<<<<<<
 *     """
 *     Set the intermediate frequency gain for the device.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_35set_tuner_if_gain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_34set_tuner_if_gain[] = "\n    Set the intermediate frequency gain for the device.\n\n    :param stage: intermediate frequency gain stage number (1 to 6 for E4000)\n    :param gain: in tenths of a dB, -30 means -3.0 dB.\n    :return: 0 on success\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_35set_tuner_if_gain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_stage;
  int __pyx_v_gain;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_tuner_if_gain (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_stage,&__pyx_n_s_gain,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stage)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_tuner_if_gain", 1, 2, 2, 1); __PYX_ERR(0, 180, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_tuner_if_gain") < 0)) __PYX_ERR(0, 180, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_stage = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_stage == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L3_error)
    __pyx_v_gain = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_gain == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_tuner_if_gain", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 180, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_tuner_if_gain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_34set_tuner_if_gain(__pyx_self, __pyx_v_stage, __pyx_v_gain);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_34set_tuner_if_gain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_stage, int __pyx_v_gain) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_tuner_if_gain", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_tuner_if_gain(__pyx_v_stage, __pyx_v_gain, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_tuner_if_gain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":190
 *     return crtlsdr.rtlsdr_set_tuner_if_gain(_c_device, stage, gain)
 * 
 * cpdef int set_tuner_gain_mode(int manual):             # <<<<<<<<<<<<<<
 *     """
 *     Set the gain mode (automatic/manual) for the device.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_37set_tuner_gain_mode(PyObject *__pyx_self, PyObject *__pyx_arg_manual); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_tuner_gain_mode(int __pyx_v_manual, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_tuner_gain_mode", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":198
 *     :return: 0 on success
 *     """
 *     return crtlsdr.rtlsdr_set_tuner_gain_mode(_c_device, manual)             # <<<<<<<<<<<<<<
 * 
 * # cpdef int set_tuner_bandwidth(uint32_t bw):
 */
  __pyx_r = rtlsdr_set_tuner_gain_mode(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, __pyx_v_manual);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":190
 *     return crtlsdr.rtlsdr_set_tuner_if_gain(_c_device, stage, gain)
 * 
 * cpdef int set_tuner_gain_mode(int manual):             # <<<<<<<<<<<<<<
 *     """
 *     Set the gain mode (automatic/manual) for the device.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_37set_tuner_gain_mode(PyObject *__pyx_self, PyObject *__pyx_arg_manual); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_36set_tuner_gain_mode[] = "\n    Set the gain mode (automatic/manual) for the device.\n    Manual gain mode must be enabled for the gain setter function to work.\n\n    :param manual: 1 means manual gain mode shall be enabled.\n    :return: 0 on success\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_37set_tuner_gain_mode(PyObject *__pyx_self, PyObject *__pyx_arg_manual) {
  int __pyx_v_manual;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_tuner_gain_mode (wrapper)", 0);
  assert(__pyx_arg_manual); {
    __pyx_v_manual = __Pyx_PyInt_As_int(__pyx_arg_manual); if (unlikely((__pyx_v_manual == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_tuner_gain_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_36set_tuner_gain_mode(__pyx_self, ((int)__pyx_v_manual));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_36set_tuner_gain_mode(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_manual) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_tuner_gain_mode", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_tuner_gain_mode(__pyx_v_manual, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_tuner_gain_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":209
 * #     crtlsdr.rtlsdr_set_tuner_bandwidth(_c_device, bw)
 * 
 * cpdef int set_sample_rate(uint32_t sample_rate):             # <<<<<<<<<<<<<<
 *     """
 *     Set the sample rate for the device, also selects the baseband filters
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_39set_sample_rate(PyObject *__pyx_self, PyObject *__pyx_arg_sample_rate); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_sample_rate(__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_sample_rate, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_sample_rate", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":220
 *     :return:
 *     """
 *     return crtlsdr.rtlsdr_set_sample_rate(_c_device, sample_rate)             # <<<<<<<<<<<<<<
 * 
 * cpdef uint32_t get_sample_rate():
 */
  __pyx_r = rtlsdr_set_sample_rate(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, __pyx_v_sample_rate);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":209
 * #     crtlsdr.rtlsdr_set_tuner_bandwidth(_c_device, bw)
 * 
 * cpdef int set_sample_rate(uint32_t sample_rate):             # <<<<<<<<<<<<<<
 *     """
 *     Set the sample rate for the device, also selects the baseband filters
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_39set_sample_rate(PyObject *__pyx_self, PyObject *__pyx_arg_sample_rate); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_38set_sample_rate[] = "\n    Set the sample rate for the device, also selects the baseband filters\n    according to the requested sample rate for tuners where this is possible.\n\n    :param sample_rate: the sample rate to be set, possible values are:\n                225001 - 300000 Hz\n  \t\t        900001 - 3200000 Hz\n  \t\t        sample loss is to be expected for rates > 2400000\n    :return:\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_39set_sample_rate(PyObject *__pyx_self, PyObject *__pyx_arg_sample_rate) {
  __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_sample_rate;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_sample_rate (wrapper)", 0);
  assert(__pyx_arg_sample_rate); {
    __pyx_v_sample_rate = __Pyx_PyInt_As_unsigned_int(__pyx_arg_sample_rate); if (unlikely((__pyx_v_sample_rate == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 209, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_sample_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_38set_sample_rate(__pyx_self, ((__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t)__pyx_v_sample_rate));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_38set_sample_rate(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_v_sample_rate) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_sample_rate", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_sample_rate(__pyx_v_sample_rate, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_sample_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":222
 *     return crtlsdr.rtlsdr_set_sample_rate(_c_device, sample_rate)
 * 
 * cpdef uint32_t get_sample_rate():             # <<<<<<<<<<<<<<
 *     """
 *     Get actual sample rate the device is configured to.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_41get_sample_rate(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_sample_rate(CYTHON_UNUSED int __pyx_skip_dispatch) {
  __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sample_rate", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":227
 *     :return: 0 on error, sample rate in Hz otherwise
 *     """
 *     return crtlsdr.rtlsdr_get_sample_rate(_c_device)             # <<<<<<<<<<<<<<
 * 
 * cpdef int set_agc_mode(int on):
 */
  __pyx_r = rtlsdr_get_sample_rate(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":222
 *     return crtlsdr.rtlsdr_set_sample_rate(_c_device, sample_rate)
 * 
 * cpdef uint32_t get_sample_rate():             # <<<<<<<<<<<<<<
 *     """
 *     Get actual sample rate the device is configured to.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_41get_sample_rate(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_40get_sample_rate[] = "\n    Get actual sample rate the device is configured to.\n    :return: 0 on error, sample rate in Hz otherwise\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_41get_sample_rate(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sample_rate (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_40get_sample_rate(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_40get_sample_rate(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_sample_rate", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_sample_rate(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_sample_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":229
 *     return crtlsdr.rtlsdr_get_sample_rate(_c_device)
 * 
 * cpdef int set_agc_mode(int on):             # <<<<<<<<<<<<<<
 *     """
 *     Enable or disable the internal digital Automatic Gain Control of the RTL2832.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_43set_agc_mode(PyObject *__pyx_self, PyObject *__pyx_arg_on); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_agc_mode(int __pyx_v_on, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_agc_mode", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":236
 *     :return: 0 on success
 *     """
 *     return crtlsdr.rtlsdr_set_agc_mode(_c_device, on)             # <<<<<<<<<<<<<<
 * 
 * cpdef int set_direct_sampling(int on):
 */
  __pyx_r = rtlsdr_set_agc_mode(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, __pyx_v_on);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":229
 *     return crtlsdr.rtlsdr_get_sample_rate(_c_device)
 * 
 * cpdef int set_agc_mode(int on):             # <<<<<<<<<<<<<<
 *     """
 *     Enable or disable the internal digital Automatic Gain Control of the RTL2832.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_43set_agc_mode(PyObject *__pyx_self, PyObject *__pyx_arg_on); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_42set_agc_mode[] = "\n    Enable or disable the internal digital Automatic Gain Control of the RTL2832.\n\n    :param on: digital AGC mode, 1 means enabled, 0 disabled\n    :return: 0 on success\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_43set_agc_mode(PyObject *__pyx_self, PyObject *__pyx_arg_on) {
  int __pyx_v_on;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_agc_mode (wrapper)", 0);
  assert(__pyx_arg_on); {
    __pyx_v_on = __Pyx_PyInt_As_int(__pyx_arg_on); if (unlikely((__pyx_v_on == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 229, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_agc_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_42set_agc_mode(__pyx_self, ((int)__pyx_v_on));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_42set_agc_mode(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_on) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_agc_mode", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_agc_mode(__pyx_v_on, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_agc_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":238
 *     return crtlsdr.rtlsdr_set_agc_mode(_c_device, on)
 * 
 * cpdef int set_direct_sampling(int on):             # <<<<<<<<<<<<<<
 *     """
 *     Enable or disable the direct sampling mode. When enabled, the IF mode
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_45set_direct_sampling(PyObject *__pyx_self, PyObject *__pyx_arg_on); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_direct_sampling(int __pyx_v_on, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_direct_sampling", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":248
 *     :return: 0 on success
 *     """
 *     return crtlsdr.rtlsdr_set_direct_sampling(_c_device, on)             # <<<<<<<<<<<<<<
 * 
 * cpdef int get_direct_sampling():
 */
  __pyx_r = rtlsdr_set_direct_sampling(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, __pyx_v_on);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":238
 *     return crtlsdr.rtlsdr_set_agc_mode(_c_device, on)
 * 
 * cpdef int set_direct_sampling(int on):             # <<<<<<<<<<<<<<
 *     """
 *     Enable or disable the direct sampling mode. When enabled, the IF mode
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_45set_direct_sampling(PyObject *__pyx_self, PyObject *__pyx_arg_on); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_44set_direct_sampling[] = "\n    Enable or disable the direct sampling mode. When enabled, the IF mode\n    of the RTL2832 is activated, and rtlsdr_set_center_freq() will control\n    the IF-frequency of the DDC, which can be used to tune from 0 to 28.8 MHz\n    (xtal frequency of the RTL2832).\n\n    :param on: 0 means disabled, 1 I-ADC input enabled, 2 Q-ADC input enabled\n    :return: 0 on success\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_45set_direct_sampling(PyObject *__pyx_self, PyObject *__pyx_arg_on) {
  int __pyx_v_on;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_direct_sampling (wrapper)", 0);
  assert(__pyx_arg_on); {
    __pyx_v_on = __Pyx_PyInt_As_int(__pyx_arg_on); if (unlikely((__pyx_v_on == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_direct_sampling", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_44set_direct_sampling(__pyx_self, ((int)__pyx_v_on));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_44set_direct_sampling(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_on) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_direct_sampling", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_direct_sampling(__pyx_v_on, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_direct_sampling", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":250
 *     return crtlsdr.rtlsdr_set_direct_sampling(_c_device, on)
 * 
 * cpdef int get_direct_sampling():             # <<<<<<<<<<<<<<
 *     """
 *     Get state of the direct sampling mode
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_47get_direct_sampling(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_direct_sampling(CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_direct_sampling", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":256
 *     :return: -1 on error, 0 means disabled, 1 I-ADC input enabled, 2 Q-ADC input enabled
 *     """
 *     return crtlsdr.rtlsdr_get_direct_sampling(_c_device)             # <<<<<<<<<<<<<<
 * 
 * cpdef int set_offset_tuning(int on):
 */
  __pyx_r = rtlsdr_get_direct_sampling(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":250
 *     return crtlsdr.rtlsdr_set_direct_sampling(_c_device, on)
 * 
 * cpdef int get_direct_sampling():             # <<<<<<<<<<<<<<
 *     """
 *     Get state of the direct sampling mode
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_47get_direct_sampling(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_46get_direct_sampling[] = "\n    Get state of the direct sampling mode\n\n    :return: -1 on error, 0 means disabled, 1 I-ADC input enabled, 2 Q-ADC input enabled\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_47get_direct_sampling(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_direct_sampling (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_46get_direct_sampling(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_46get_direct_sampling(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_direct_sampling", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_direct_sampling(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_direct_sampling", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":258
 *     return crtlsdr.rtlsdr_get_direct_sampling(_c_device)
 * 
 * cpdef int set_offset_tuning(int on):             # <<<<<<<<<<<<<<
 *     """
 *     Enable or disable offset tuning for zero-IF tuners, which allows to avoid
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_49set_offset_tuning(PyObject *__pyx_self, PyObject *__pyx_arg_on); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_offset_tuning(int __pyx_v_on, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_offset_tuning", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":266
 *     :return: 0 on success
 *     """
 *     return crtlsdr.rtlsdr_set_offset_tuning(_c_device, on)             # <<<<<<<<<<<<<<
 * 
 * cpdef int get_offset_tuning():
 */
  __pyx_r = rtlsdr_set_offset_tuning(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, __pyx_v_on);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":258
 *     return crtlsdr.rtlsdr_get_direct_sampling(_c_device)
 * 
 * cpdef int set_offset_tuning(int on):             # <<<<<<<<<<<<<<
 *     """
 *     Enable or disable offset tuning for zero-IF tuners, which allows to avoid
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_49set_offset_tuning(PyObject *__pyx_self, PyObject *__pyx_arg_on); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_48set_offset_tuning[] = "\n    Enable or disable offset tuning for zero-IF tuners, which allows to avoid\n    problems caused by the DC offset of the ADCs and 1/f noise.\n\n    :param on: 0 means disabled, 1 enabled\n    :return: 0 on success\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_49set_offset_tuning(PyObject *__pyx_self, PyObject *__pyx_arg_on) {
  int __pyx_v_on;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_offset_tuning (wrapper)", 0);
  assert(__pyx_arg_on); {
    __pyx_v_on = __Pyx_PyInt_As_int(__pyx_arg_on); if (unlikely((__pyx_v_on == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 258, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_offset_tuning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_48set_offset_tuning(__pyx_self, ((int)__pyx_v_on));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_48set_offset_tuning(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_on) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_offset_tuning", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_set_offset_tuning(__pyx_v_on, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.set_offset_tuning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":268
 *     return crtlsdr.rtlsdr_set_offset_tuning(_c_device, on)
 * 
 * cpdef int get_offset_tuning():             # <<<<<<<<<<<<<<
 *     """
 *     Get state of the offset tuning mode
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_51get_offset_tuning(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_offset_tuning(CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_offset_tuning", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":274
 *     :return: -1 on error, 0 means disabled, 1 enabled
 *     """
 *     return crtlsdr.rtlsdr_get_offset_tuning(_c_device)             # <<<<<<<<<<<<<<
 * 
 * cpdef int reset_buffer():
 */
  __pyx_r = rtlsdr_get_offset_tuning(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":268
 *     return crtlsdr.rtlsdr_set_offset_tuning(_c_device, on)
 * 
 * cpdef int get_offset_tuning():             # <<<<<<<<<<<<<<
 *     """
 *     Get state of the offset tuning mode
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_51get_offset_tuning(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_50get_offset_tuning[] = "\n    Get state of the offset tuning mode\n\n    :return: -1 on error, 0 means disabled, 1 enabled\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_51get_offset_tuning(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_offset_tuning (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_50get_offset_tuning(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_50get_offset_tuning(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_offset_tuning", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_get_offset_tuning(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.get_offset_tuning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":276
 *     return crtlsdr.rtlsdr_get_offset_tuning(_c_device)
 * 
 * cpdef int reset_buffer():             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_reset_buffer(_c_device)
 * 
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_53reset_buffer(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_reset_buffer(CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_buffer", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":277
 * 
 * cpdef int reset_buffer():
 *     return crtlsdr.rtlsdr_reset_buffer(_c_device)             # <<<<<<<<<<<<<<
 * 
 * cpdef bytes read_sync(int num_samples=8 * 32 * 512):
 */
  __pyx_r = rtlsdr_reset_buffer(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":276
 *     return crtlsdr.rtlsdr_get_offset_tuning(_c_device)
 * 
 * cpdef int reset_buffer():             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_reset_buffer(_c_device)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_53reset_buffer(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_53reset_buffer(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_buffer (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_52reset_buffer(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_52reset_buffer(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("reset_buffer", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_reset_buffer(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.reset_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":279
 *     return crtlsdr.rtlsdr_reset_buffer(_c_device)
 * 
 * cpdef bytes read_sync(int num_samples=8 * 32 * 512):             # <<<<<<<<<<<<<<
 *     """
 *     The raw, captured IQ data is 8 bit unsigned data.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_55read_sync(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_read_sync(CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_read_sync *__pyx_optional_args) {
  int __pyx_v_num_samples = __pyx_k__4;
  __pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint8_t *__pyx_v_samples;
  int __pyx_v_n_read;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("read_sync", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_num_samples = __pyx_optional_args->num_samples;
    }
  }

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":285
 *     :return:
 *     """
 *     cdef uint8_t *samples = <uint8_t *> malloc(2*num_samples * sizeof(uint8_t))             # <<<<<<<<<<<<<<
 *     cdef int n_read = 0
 * 
 */
  __pyx_v_samples = ((__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint8_t *)malloc(((2 * __pyx_v_num_samples) * (sizeof(__pyx_t_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_uint8_t)))));

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":286
 *     """
 *     cdef uint8_t *samples = <uint8_t *> malloc(2*num_samples * sizeof(uint8_t))
 *     cdef int n_read = 0             # <<<<<<<<<<<<<<
 * 
 *     crtlsdr.rtlsdr_read_sync(_c_device, <void *>samples, num_samples, &n_read)
 */
  __pyx_v_n_read = 0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":288
 *     cdef int n_read = 0
 * 
 *     crtlsdr.rtlsdr_read_sync(_c_device, <void *>samples, num_samples, &n_read)             # <<<<<<<<<<<<<<
 * 
 *     return bytes(samples[0:n_read])
 */
  rtlsdr_read_sync(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, ((void *)__pyx_v_samples), __pyx_v_num_samples, (&__pyx_v_n_read));

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":290
 *     crtlsdr.rtlsdr_read_sync(_c_device, <void *>samples, num_samples, &n_read)
 * 
 *     return bytes(samples[0:n_read])             # <<<<<<<<<<<<<<
 * 
 * cpdef int read_async(callback, connection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_samples) + 0, __pyx_v_n_read - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyBytes_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":279
 *     return crtlsdr.rtlsdr_reset_buffer(_c_device)
 * 
 * cpdef bytes read_sync(int num_samples=8 * 32 * 512):             # <<<<<<<<<<<<<<
 *     """
 *     The raw, captured IQ data is 8 bit unsigned data.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.read_sync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_55read_sync(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_54read_sync[] = "\n    The raw, captured IQ data is 8 bit unsigned data.\n\n    :return:\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_55read_sync(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_num_samples;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_sync (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_num_samples,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num_samples);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_sync") < 0)) __PYX_ERR(0, 279, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_num_samples = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_num_samples == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L3_error)
    } else {
      __pyx_v_num_samples = __pyx_k__4;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_sync", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 279, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.read_sync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_54read_sync(__pyx_self, __pyx_v_num_samples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_54read_sync(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_num_samples) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_read_sync __pyx_t_2;
  __Pyx_RefNannySetupContext("read_sync", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.num_samples = __pyx_v_num_samples;
  __pyx_t_1 = __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_read_sync(0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.read_sync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":292
 *     return bytes(samples[0:n_read])
 * 
 * cpdef int read_async(callback, connection):             # <<<<<<<<<<<<<<
 *     """
 *     Read samples from the device asynchronously. This function will block until
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_57read_async(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_read_async(PyObject *__pyx_v_callback, PyObject *__pyx_v_connection, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_async", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":300
 *     """
 *     global f
 *     f = callback             # <<<<<<<<<<<<<<
 *     return crtlsdr.rtlsdr_read_async(_c_device, _c_callback_recv, <void *>connection, 0, 0)
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_f, __pyx_v_callback) < 0) __PYX_ERR(0, 300, __pyx_L1_error)

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":301
 *     global f
 *     f = callback
 *     return crtlsdr.rtlsdr_read_async(_c_device, _c_callback_recv, <void *>connection, 0, 0)             # <<<<<<<<<<<<<<
 * 
 * cpdef int cancel_async():
 */
  __pyx_r = rtlsdr_read_async(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device, __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_callback_recv, ((void *)__pyx_v_connection), 0, 0);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":292
 *     return bytes(samples[0:n_read])
 * 
 * cpdef int read_async(callback, connection):             # <<<<<<<<<<<<<<
 *     """
 *     Read samples from the device asynchronously. This function will block until
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("src.urh.dev.native.lib.rtlsdr_fallback.read_async", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_57read_async(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_56read_async[] = "\n    Read samples from the device asynchronously. This function will block until\n    it is being canceled using rtlsdr_cancel_async()\n    read_bytes_async\n    :return: 0 on success\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_57read_async(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_callback = 0;
  PyObject *__pyx_v_connection = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_async (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_callback,&__pyx_n_s_connection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_callback)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_connection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_async", 1, 2, 2, 1); __PYX_ERR(0, 292, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_async") < 0)) __PYX_ERR(0, 292, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_callback = values[0];
    __pyx_v_connection = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_async", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 292, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.read_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_56read_async(__pyx_self, __pyx_v_callback, __pyx_v_connection);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_56read_async(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_callback, PyObject *__pyx_v_connection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("read_async", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_read_async(__pyx_v_callback, __pyx_v_connection, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.read_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":303
 *     return crtlsdr.rtlsdr_read_async(_c_device, _c_callback_recv, <void *>connection, 0, 0)
 * 
 * cpdef int cancel_async():             # <<<<<<<<<<<<<<
 *     """
 *     Cancel all pending asynchronous operations on the device.
 */

static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_59cancel_async(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_cancel_async(CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_async", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":309
 *     :return: 0 on success
 *     """
 *     return crtlsdr.rtlsdr_cancel_async(_c_device)             # <<<<<<<<<<<<<<
 */
  __pyx_r = rtlsdr_cancel_async(__pyx_v_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback__c_device);
  goto __pyx_L0;

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":303
 *     return crtlsdr.rtlsdr_read_async(_c_device, _c_callback_recv, <void *>connection, 0, 0)
 * 
 * cpdef int cancel_async():             # <<<<<<<<<<<<<<
 *     """
 *     Cancel all pending asynchronous operations on the device.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_59cancel_async(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_58cancel_async[] = "\n    Cancel all pending asynchronous operations on the device.\n\n    :return: 0 on success\n    ";
static PyObject *__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_59cancel_async(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_async (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_58cancel_async(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_58cancel_async(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cancel_async", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_cancel_async(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.urh.dev.native.lib.rtlsdr_fallback.cancel_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {"get_device_count", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_1get_device_count, METH_NOARGS, 0},
  {"get_device_name", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_3get_device_name, METH_O, 0},
  {"get_device_usb_strings", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_5get_device_usb_strings, METH_O, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_4get_device_usb_strings},
  {"get_index_by_serial", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_7get_index_by_serial, METH_O, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_6get_index_by_serial},
  {"open", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_9open, METH_O, 0},
  {"close", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_11close, METH_NOARGS, 0},
  {"set_xtal_freq", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_13set_xtal_freq, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_12set_xtal_freq},
  {"get_xtal_freq", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_15get_xtal_freq, METH_NOARGS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_14get_xtal_freq},
  {"get_usb_strings", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_17get_usb_strings, METH_NOARGS, 0},
  {"set_center_freq", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_19set_center_freq, METH_O, 0},
  {"get_center_freq", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_21get_center_freq, METH_NOARGS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_20get_center_freq},
  {"set_freq_correction", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_23set_freq_correction, METH_O, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_22set_freq_correction},
  {"get_freq_correction", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_25get_freq_correction, METH_NOARGS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_24get_freq_correction},
  {"get_tuner_type", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_27get_tuner_type, METH_NOARGS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_26get_tuner_type},
  {"get_tuner_gains", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_29get_tuner_gains, METH_NOARGS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_28get_tuner_gains},
  {"set_tuner_gain", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_31set_tuner_gain, METH_O, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_30set_tuner_gain},
  {"get_tuner_gain", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_33get_tuner_gain, METH_NOARGS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_32get_tuner_gain},
  {"set_tuner_if_gain", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_35set_tuner_if_gain, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_34set_tuner_if_gain},
  {"set_tuner_gain_mode", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_37set_tuner_gain_mode, METH_O, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_36set_tuner_gain_mode},
  {"set_sample_rate", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_39set_sample_rate, METH_O, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_38set_sample_rate},
  {"get_sample_rate", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_41get_sample_rate, METH_NOARGS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_40get_sample_rate},
  {"set_agc_mode", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_43set_agc_mode, METH_O, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_42set_agc_mode},
  {"set_direct_sampling", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_45set_direct_sampling, METH_O, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_44set_direct_sampling},
  {"get_direct_sampling", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_47get_direct_sampling, METH_NOARGS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_46get_direct_sampling},
  {"set_offset_tuning", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_49set_offset_tuning, METH_O, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_48set_offset_tuning},
  {"get_offset_tuning", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_51get_offset_tuning, METH_NOARGS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_50get_offset_tuning},
  {"reset_buffer", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_53reset_buffer, METH_NOARGS, 0},
  {"read_sync", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_55read_sync, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_54read_sync},
  {"read_async", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_57read_async, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_56read_async},
  {"cancel_async", (PyCFunction)__pyx_pw_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_59cancel_async, METH_NOARGS, __pyx_doc_3src_3urh_3dev_6native_3lib_15rtlsdr_fallback_58cancel_async},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_rtlsdr_fallback(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_rtlsdr_fallback},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "rtlsdr_fallback",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_connection, __pyx_k_connection, sizeof(__pyx_k_connection), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_gain, __pyx_k_gain, sizeof(__pyx_k_gain), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_num_samples, __pyx_k_num_samples, sizeof(__pyx_k_num_samples), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rtl_freq, __pyx_k_rtl_freq, sizeof(__pyx_k_rtl_freq), 0, 0, 1, 1},
  {&__pyx_n_s_stage, __pyx_k_stage, sizeof(__pyx_k_stage), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tuner_freq, __pyx_k_tuner_freq, sizeof(__pyx_k_tuner_freq), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 154, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":39
 *         return manufacturer.decode('UTF-8'), product.decode('UTF-8'), serial.decode('UTF-8')
 *     else:
 *         return None, None, None             # <<<<<<<<<<<<<<
 * 
 * cpdef int get_index_by_serial(str serial):
 */
  __pyx_tuple_ = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":91
 *         return rtl_freq, tuner_freq
 *     else:
 *         return None, None             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple get_usb_strings():
 */
  __pyx_tuple__2 = PyTuple_Pack(2, Py_None, Py_None); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":101
 *         return manufacturer.decode('UTF-8'), product.decode('UTF-8'), serial.decode('UTF-8')
 *     else:
 *         return None, None, None             # <<<<<<<<<<<<<<
 * 
 * cpdef int set_center_freq(uint32_t freq):
 */
  __pyx_tuple__3 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initrtlsdr_fallback(void); /*proto*/
PyMODINIT_FUNC initrtlsdr_fallback(void)
#else
PyMODINIT_FUNC PyInit_rtlsdr_fallback(void); /*proto*/
PyMODINIT_FUNC PyInit_rtlsdr_fallback(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_rtlsdr_fallback(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #endif
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_rtlsdr_fallback(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("rtlsdr_fallback", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_src__urh__dev__native__lib__rtlsdr_fallback) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "src.urh.dev.native.lib.rtlsdr_fallback")) {
      if (unlikely(PyDict_SetItemString(modules, "src.urh.dev.native.lib.rtlsdr_fallback", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":279
 *     return crtlsdr.rtlsdr_reset_buffer(_c_device)
 * 
 * cpdef bytes read_sync(int num_samples=8 * 32 * 512):             # <<<<<<<<<<<<<<
 *     """
 *     The raw, captured IQ data is 8 bit unsigned data.
 */
  __pyx_k__4 = ((8 * 32) * 0x200);
  __pyx_k__4 = ((8 * 32) * 0x200);

  /* "src/urh/dev/native/lib/rtlsdr_fallback.pyx":1
 * # cython wrapper for RTL-SDR (https://github.com/pinkavaj/rtl-sdr)             # <<<<<<<<<<<<<<
 * # this fallback does not include set_tuner_bandwidth , as it is not supported e.g. in Manjaro and Ubuntu packages
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init src.urh.dev.native.lib.rtlsdr_fallback", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init src.urh.dev.native.lib.rtlsdr_fallback");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
  static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* decode_c_string */
  static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* ArgTypeTest */
  static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* RaiseArgTupleInvalid */
  static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
  static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
  static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_rtlsdr_tuner(rtlsdr_tuner value) {
    const rtlsdr_tuner neg_one = (rtlsdr_tuner) -1, const_zero = (rtlsdr_tuner) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(rtlsdr_tuner) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(rtlsdr_tuner) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(rtlsdr_tuner) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(rtlsdr_tuner) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(rtlsdr_tuner) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(rtlsdr_tuner),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
